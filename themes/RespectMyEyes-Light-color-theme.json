{
  "name": "RespectMyEyes-Next theme",
  "type": "light",
  "semanticHighlighting": false,
  "colors": {
    // ====================================================
    // Base colors:
    //
    // border color for focused elements:
    "focusBorder": "#00800080",
    //
    // the search icons and maybe other icons:
    "icon.foreground": "#000000",
    //
    // text selection in the search and other workbench areas:
    "selection.background": "#00B00040",
    //
    //
    //
    // ====================================================
    // Input controls: it's the Search box and the Find/Replace box.
    //
    // the default placeholder text is too low contrast:
    "input.placeholderForeground": "#A0A0A0",
    "input.foreground": "#00B000",
    "inputOption.activeBackground": "#00B00040",
    "input.background": "#FFFFFF",
    //
    // I would've implemented it, if not for the Debug Console panel.
    // "input.border": "#E8E8E800",
    //
    //
    // ====================================================
    // Button controls:
    //
    "button.foreground": "#00B000",
    "button.background": "#FFFFFF",
    "button.hoverBackground": "#00B00040",
    //
    // Secondary buttons:
    "button.secondaryForeground": "#606060",
    "button.secondaryBackground": "#FFFFFF",
    "button.secondaryHoverBackground": "#00B00040",
    //
    //
    //
    // ====================================================
    // Dropdown controls:
    //
    "dropdown.foreground": "#006000",
    //
    //
    //
    // ====================================================
    // Progress bar:
    //
    "progressBar.background": "#00B000",
    //
    //
    //
    // ====================================================
    // Title Bar: the VS Code window title bar.
    //
    "titleBar.activeBackground": "#F3F3F3",
    "titleBar.activeForeground": "#333333",
    "titleBar.inactiveBackground": "#F3F3F3",
    "titleBar.inactiveForeground": "#33333380",
    //
    //
    //
    // ====================================================
    // Status Bar: the bar at the bottom.
    //
    "statusBar.background": "#F3F3F3",
    "statusBar.foreground": "#008000",
    "statusBar.border": "#00800040",
    //
    "statusBar.debuggingBackground": "#F3F3F3",
    "statusBar.debuggingForeground": "#CC6633",
    "statusBar.debuggingBorder": "#CC6633",
    //
    "statusBar.noFolderBackground": "#F3F3F3",
    "statusBar.noFolderForeground": "#68217A",
    "statusBar.noFolderBorder": "#68217A",
    //
    "statusBarItem.activeBackground": "#FFFFFF2E",
    "statusBarItem.hoverBackground": "#FFFFFF1F",
    //
    "statusBarItem.prominentBackground": "#00000080",
    "statusBarItem.prominentForeground": "#FFFFFF",
    "statusBarItem.prominentHoverBackground": "#0000004D",
    //
    "statusBarItem.remoteBackground": "#16825D",
    "statusBarItem.remoteForeground": "#FFFFFF",
    //
    //
    //
    // ====================================================
    // Activity Bar: the bar with the badges for Explorer, Git, Debug, Extensions...
    //
    // The whole Activity Bar background:
    "activityBar.background": "#F3F3F3",
    "activityBar.border": "#00800040",
    //
    // The line when moving the items:
    "activityBar.dropBorder": "#00B000",
    //
    // The colors for items:
    "activityBar.foreground": "#00B000",
    "activityBar.inactiveForeground": "#33333340",
    //
    // The notification badges:
    "activityBarBadge.background": "#80C080",
    "activityBarBadge.foreground": "#FFFFFF",
    //
    // The open item's side indicator:
    "activityBar.activeBorder": "#00B000",
    // The open item's background:
    "activityBar.activeBackground": "#FFFFFF",
    //
    //
    //
    // ====================================================
    // Side Bar: the pane that opens, when you select the badge for Explorer, Git, Debug...
    //
    // the Title on top of the opened Explorer pane for example:
    "sideBarTitle.foreground": "#6F6F6F",
    //
    // the opened pane background:
    "sideBar.background": "#F3F3F3",
    "sideBar.border": "#DDDDDD",
    //
    // the drop background when moving sub-panes (Sections)
    // with mouse in the Explorer pane, for example:
    "sideBar.dropBackground": "#0000001A",
    //
    // the Section headers in the opened side pane:
    "sideBarSectionHeader.background": "#80808033",
    //
    //
    //
    // ====================================================
    // Panel: the bottom panel with the Terminal, Output, Problems, Debug Console...
    //
    "panel.background": "#F3F3F3",
    "panelTitle.activeForeground": "#008000",
    "panelTitle.inactiveForeground": "#000000",
    //
    //
    //
    // ====================================================
    // Debug Console:
    "debugConsole.warningForeground": "#E8810C",
    "debugConsole.errorForeground": "#FF0000",
    "debugConsole.sourceForeground": "#000000",
    "debugConsole.infoForeground": "#0000CC",
    //
    //
    //
    // ====================================================
    // Lists and Trees: it's the File Explorer list.
    //
    // the default hover background is too low contrast:
    "list.hoverBackground": "#FFFFFF",
    "list.hoverForeground": "#000000",
    "list.focusBackground": "#BFEBBF",
    //
    //
    //
    // the default background is blue, which is distracting:
    "list.activeSelectionBackground": "#FFFFFF",
    "list.inactiveSelectionBackground": "#FFFFFF",
    //
    //
    //
    // the default text is white, which should be a dark color:
    "list.activeSelectionForeground": "#00A000",
    "list.inactiveSelectionForeground": "#00A000",
    //
    //
    //
    // search in Command Palette text highlight:
    "list.highlightForeground": "#00A000",
    //
    // Indent guides in File Explorer:
    "tree.indentGuidesStroke": "#00B00080",
    "tree.inactiveIndentGuidesStroke": "#00B00020",
    //
    //
    //
    //
    // ====================================================
    // Menu Bar:
    //
    "menubar.selectionBackground": "#FFFFFF",
    "menu.selectionBackground": "#00B00020",
    "menu.selectionForeground": "#000000",
    "menu.background": "#FFFFFF",
    //
    //
    //
    //
    // ====================================================
    // Editor: the window with the actual text editing.
    //
    // the background surface for the whole window:
    "editor.background": "#FFFFFF",
    //
    // the default text color, before the TextMate grammar rules:
    "editor.foreground": "#000000",
    //
    // the whitespace dots:
    "editorWhitespace.foreground": "#C0C0C080",
    //
    //
    //
    // line numbers:
    "editorLineNumber.foreground": "#A9A9A980",
    "editorLineNumber.activeForeground": "#0000CC",
    //
    //
    //
    // the background behind the selection text when in another window or pane,
    // should be different from the active one:
    "editor.inactiveSelectionBackground": "#00B00020", // #DFF5DF
    //
    "editor.selectionBackground": "#00B00080",
    //
    // region with the same content as the selection,
    // should be not too attractive to the eye:
    "editor.selectionHighlightBackground": "#00B00020",
    //
    "editor.wordHighlightBackground": "#00B00020",
    //
    "editor.wordHighlightStrongBackground": "#00B00020",
    //
    "editor.hoverHighlightBackground": "#00B00080",
    //
    //
    //
    // the indent lines to the left,
    // should be the same color as the the highlighted brackets:
    "editorIndentGuide.activeBackground1": "#00B00060",
    "editorIndentGuide.activeBackground2": "#00B00060",
    "editorIndentGuide.activeBackground3": "#00B00060",
    "editorIndentGuide.activeBackground4": "#00B00060",
    "editorIndentGuide.activeBackground5": "#00B00060",
    "editorIndentGuide.activeBackground6": "#00B00060",
    //
    // the indent lines not active at the moment, very light grey:
    "editorIndentGuide.background1": "#C0C0C080",
    "editorIndentGuide.background2": "#C0C0C080",
    "editorIndentGuide.background3": "#C0C0C080",
    "editorIndentGuide.background4": "#C0C0C080",
    "editorIndentGuide.background5": "#C0C0C080",
    "editorIndentGuide.background6": "#C0C0C080",
    //
    // the Bracket Matches in the editor window:
    "editorBracketMatch.background": "#A9A9A960",
    //
    // I want the borders to be white, like the background:
    "editorBracketMatch.border": "#FFFFFF00",
    //
    //
    //
    // the suggestion windows, like the IntelliSense suggestion list,
    // should be grey:
    "editorSuggestWidget.background": "#F3F3F3",
    //
    // in centered layout, the empty background:
    "editorPane.background": "#F3F3F380",
    //
    "editor.lineHighlightBorder": "#00B00020",
    //
    //
    //
    "editorCursor.foreground": "#00B000",
    //
    //
    //
    // Find workflow:
    //
    "editor.findMatchBackground": "#FEFE3380",
    "editor.findMatchBorder": "#FFA500",
    //
    "editor.findMatchHighlightBackground": "#FEFE3380",
    //
    "editor.rangeHighlightBackground": "#FEFE3340",
    //
    //
    //
    // Highlights the opening and closing HTML tags for editing:
    "editor.linkedEditingBackground": "#C344AB20",
    //
    //
    //
    // Warning highlight:
    "editorWarning.foreground": "#A9A9A9",
    // "editorInfo.foreground": "#00B000",
    //
    //
    //
    // ====================================================
    // Editor Widget:
    //
    "editorWidget.border": "#00B00080",
    //
    //
    //
    // ====================================================
    // Diff Editor:
    //
    "diffEditor.insertedTextBackground": "#00B00020",
    "diffEditor.removedTextBackground": "#FF000020",
    //
    //
    //
    // ====================================================
    // (Tabs) Editor Group Header: it's where the tabs are situated.
    //
    "editorGroupHeader.tabsBackground": "#F3F3F3",
    "editorGroupHeader.noTabsBackground": "#FFFFFF",
    "tab.activeForeground": "#00A000",
    "tab.inactiveForeground": "#909090",
    "tab.hoverBackground": "#FFFFFF",
    //
    //
    //
    // ====================================================
    // Breadcrumbs:
    //
    "breadcrumb.background": "#F3F3F3",
    "breadcrumb.foreground": "#909090",
    "breadcrumbPicker.background": "#F3F3F3",
    "breadcrumb.focusForeground": "#00A000",
    "breadcrumb.activeSelectionForeground": "#00A000",
    //
    //
    //
    // ====================================================
    // Symbol Icons:
    //
    "symbolIcon.interfaceForeground": "#00A000",
    //
    //
    //
    // ====================================================
    // Settings UI: it's the GUI for changing the Settings.
    //
    // the default borders were white and they blend-in with the background:
    "settings.numberInputBorder": "#CECECE",
    "settings.textInputBorder": "#CECECE",
    //
    //
    //
  },
  "tokenColors": [
    // ====================================================
    // In general (the baseline):
    //
    // the baseline color, for all the code:
    {
      "scope": [
        "source",
      ],
      "settings": {
        "foreground": "#000000",
      }
    },
    //
    // string, regexp:
    {
      "scope": [
        "string",
        "entity.name.operator.custom-literal.string",
        "meta.preprocessor.string",
        "constant.regexp",
        "string.regexp",
        "string.regexp keyword",
        "string.regexp keyword.control",
        "string.regexp keyword.operator",
        "string.regexp punctuation",
      ],
      "settings": {
        "foreground": "#A31515"
      }
    },
    //
    // escape characters:
    {
      "scope": [
        "constant.character.escape",
      ],
      "settings": {
        "foreground": "#A9A9A9",
      }
    },
    //
    // "/ /" regexp begin and end characters:
    {
      "scope": [
        "string.regexp punctuation.definition.string",
      ],
      "settings": {
        "foreground": "#0BC5E3",
      }
    },
    //
    // numbers, numeric literals:
    {
      "scope": [
        "constant.numeric", // 0, 1, 36.08M
      ],
      "settings": {
        "foreground": "#000000",
      }
    },
    //
    // number prefix for binary, hex and so on:
    {
      "scope": [
        "constant.numeric.other.preffix", // "0x", "0b"
      ],
      "settings": {
        "foreground": "#E8810C",
      }
    },
    // number suffix for float, double and so on:
    {
      "scope": [
        "constant.numeric.other.suffix" // "f"
      ],
      "settings": {
        "foreground": "#E8810C",
      }
    },
    //
    // booleans:
    {
      "scope": [
        "constant.language.boolean", // "true", "false"
      ],
      "settings": {
        "foreground": "#A31515",
      }
    },
    //
    // Literals in general:
    //
    // comments:
    {
      "scope": [
        "comment",
        "punctuation.definition.comment" // fix an edge case in Markdown -> code block -> comment
      ],
      "settings": {
        "foreground": "#50A750",
      }
    },
    //
    //
    //
    // ====================================================
    // Keywords in general:
    //
    {
      "scope": [
        "keyword",
      ],
      "settings": {
        "foreground": "#0000CC",
      }
    },
    //
    // control keywords:
    {
      "scope": [
        "keyword.control", // "if", "else", "return"
      ],
      "settings": {
        "foreground": "#0BC5E3",
      }
    },
    //
    // import keywords:
    {
      "scope": [
        "keyword.control.import", // "import", "from"
        // works for JS/TS and Python for sure
      ],
      "settings": {
        "foreground": "#A9A9A9",
      }
    },
    //
    // storage types:
    {
      "scope": [
        "storage.type", // const, class in JS; type name in C#
      ],
      "settings": {
        "foreground": "#A31515",
      }
    },
    //
    // storage modifiers:
    {
      "scope": [
        "storage.modifier",
      ],
      "settings": {
        "foreground": "#A9A9A9",
      }
    },
    //
    // 180deg in CSS:
    {
      "scope": [
        "support.constant",
      ],
      "settings": {
        "foreground": "#A31515",
      }
    },
    //
    //
    //
    // ====================================================
    // Names in general:
    //
    // Functions:
    //
    // function name in definition:
    {
      "scope": [
        "meta.definition.function entity.name.function",
      ],
      "settings": {
        "foreground": "#0000CC"
      }
    },
    //
    // function name in call:
    {
      "scope": [
        "meta.function-call entity.name.function",
        "entity.name.function",
        "support.function",
      ],
      "settings": {
        "foreground": "#0000CC"
      }
    },
    //
    // argument names inside a function call:
    {
      "scope": [
        "variable.parameter",
      ],
      "settings": {
        "foreground": "#C344AB",
      }
    },
    //
    // new Expression:
    {
      "scope": [
        "new.expr",
        "keyword.operator.new",
      ],
      "settings": {
        "foreground": "#0000CC"
      }
    },
    //
    //
    //
    // Types:
    //
    // type name in definition:
    {
      "scope": [
        "entity.name.type",
      ],
      "settings": {
        "foreground": "#0000CC"
      }
    },
    //
    // type parameters:
    {
      "scope": [
        "meta.type.annotation",
        "meta.type.parameters",
      ],
      "settings": {
        "foreground": "#E8810C"
      }
    },
    //
    //
    //
    // Variables:
    //
    // variable name in definition:
    {
      "scope": [
        "meta.definition.variable variable",
      ],
      "settings": {
        "foreground": "#0000CC"
      }
    },
    //
    // variable & property names in call:
    {
      "scope": [
        "variable", // variable name
      ],
      "settings": {
        "foreground": "#000000"
      }
    },
    //
    //
    //
    // Objects:
    //
    // object keys when defining a type (class, interface):
    {
      "scope": [
        "variable.object.property",
      ],
      "settings": {
        "foreground": "#0BC5E3"
      }
    },
    //
    // object keys when instantiating an object:
    {
      "scope": [
        "meta.object-literal.key",
        "meta.object-literal.key entity.name.function",
      ],
      "settings": {
        "foreground": "#0BC5E3"
      }
    },
    //
    //
    //
    // Enums:
    //
    // enum member names:
    {
      "scope": [
        "variable.other.enummember", // enum member names
        "entity.name.variable.enum-member", // enum member names in C#
        "constant.other.enum" // enum member names in Java
      ],
      "settings": {
        "foreground": "#C344AB"
      }
    },
    //
    //
    //
    // CSS kinda:
    {
      "scope": [
        "meta.selector", // class selector and others...
      ],
      "settings": {
        "foreground": "#0BC5E3"
      }
    },
    //
    // property names:
    {
      "scope": [
        "meta.property-name",
        "support.type.property-name",
      ],
      "settings": {
        "foreground": "#0000CC"
      }
    },
    //
    // property values:
    {
      "scope": [
        "meta.property-value",
        "meta.structure.dictionary.value",
      ],
      "settings": {
        "foreground": "#A31515"
      }
    },
    //
    //
    //
    // HTML kinda:
    //
    // tags:
    {
      "scope": [
        "meta.tag",
        "entity.name.tag",
      ],
      "settings": {
        "foreground": "#0000CC"
      }
    },
    //
    // attributes:
    {
      "scope": [
        "meta.attribute",
        "entity.other.attribute-name"
      ],
      "settings": {
        "foreground": "#C344AB"
      }
    },
    //
    // heading:
    {
      "scope": [
        "heading",
      ],
      "settings": {
        "foreground": "#0BC5E3"
      }
    },
    //
    // link:
    {
      "scope": [
        "meta.link",
      ],
      "settings": {
        "foreground": "#A9A9A9"
      }
    },
    //
    // embedded block & inline:
    {
      "scope": [
        "meta.embedded",
        "markup.inline",
      ],
      "settings": {
        "foreground": "#A9A9A9"
      }
    },
    //
    // label name, for example in a goto statement:
    {
      "scope": [
        "entity.name.label",
      ],
      "settings": {
        "foreground": "#0000CC"
      }
    },
    //
    //
    //
    // ====================================================
    // Punctuation in general:
    //
    {
      "scope": [
        "punctuation",
        "punctuation.definition.string" // fix for Markdown
      ],
      "settings": {
        "foreground": "#A9A9A9",
      }
    },
    //
    // important operators:
    {
      "scope": [
        "keyword.operator.arithmetic", // +, -, *, /
        "keyword.operator.assignment", // =
        "keyword.operator.comparison", // ===
      ],
      "settings": {
        "foreground": "#000000",
      }
    },
    //
    // bitwise operators:
    {
      "scope": [
        "keyword.operator.bitwise", // ~, &, |, ^, <<, >>
      ],
      "settings": {
        "foreground": "#0BC5E3",
      }
    },
    //
    // common punctuation:
    {
      "scope": [
        "punctuation.definition.array", // arr[]
        "punctuation.definition.block", // { }
        "punctuation.definition.binding-pattern.object", // { }
        "punctuation.definition.section.case-statement", // :
        "punctuation.definition.dictionary", // dict[]
        "punctuation.separator", // ,
        "meta.embedded.block.css punctuation.separator", // ,
        "punctuation.section",
        "punctuation.terminator", // ;
        "punctuation.destructuring", // :
        "keyword.operator", // :
        "keyword.operator.type.annotation", // :
        "keyword.operator.logical", // ||, !
        "keyword.operator.comparison", // ===
        "keyword.operator.relational", // >, <
        "keyword.operator.increment", // ++
        "keyword.operator.decrement", // --
      ],
      "settings": {
        "foreground": "#A9A9A9",
      }
    },
    //
    // spread and rest operators "...":
    {
      "scope": [
        "keyword.operator.rest", // ...
        "keyword.operator.spread", // ...
      ],
      "settings": {
        "foreground": "#A9A9A9",
      }
    },
    //
    // arrow operator "=>":
    {
      "scope": [
        "storage.type.function.arrow", // "=>" in JS/TS
        "keyword.operator.arrow", // "=>" in C#
      ],
      "settings": {
        "foreground": "#0BC5E3",
        "fontStyle": "bold"
      }
    },
    //
    // template string, "` `":
    {
      "scope": [
        "string.template punctuation.definition.string.template", // "` `" in TypeScript. // This for sure works in TypeScript.
      ],
      "settings": {
        "foreground": "#A9A9A9",
        "fontStyle": "bold"
      }
    },
    //
    // ternary operator "?", ":":
    {
      "scope": [
        "keyword.operator.ternary",
      ],
      "settings": {
        "foreground": "#0BC5E3",
        "fontStyle": "bold"
      }
    },
    //
    // arrow function operator in type annotation of arrow function:
    {
      "scope": [
        "meta.type.annotation storage.type.function.arrow", // "=>"
        "meta.type.declaration storage.type.function.arrow", // "=>"
      ],
      "settings": {
        "foreground": "#E8810C"
      }
    },
    //
    // logical operators:
    {
      "scope": [
        "punctuation.definition.template-expression", // "${ }"
      ],
      "settings": {
        "foreground": "#0BC5E3",
      }
    },
    //
    // "." property accessor:
    {
      "scope": [
        "punctuation.accessor",
      ],
      "settings": {
        "foreground": "#000000",
      }
    },
    //
    // "?" optional assignment: // (may be specific to TS / JS)
    {
      "scope": [
        "keyword.operator.optional", // "?"
      ],
      "settings": {
        "foreground": "#A9A9A9",
      }
    },
    //
    // "!" definite assignment: // (may be specific to TS / JS)
    {
      "scope": [
        "keyword.operator.definiteassignment" // "!"
      ],
      "settings": {
        "foreground": "#A9A9A9",
      }
    },
    //
    // "< >" angle brackets for generic type parameters:
    {
      "scope": [
        "punctuation.definition.typeparameters",
      ],
      "settings": {
        "foreground": "#A9A9A9"
      }
    },
    //
    // "( )" round braces:
    {
      "scope": [
        "meta.brace.round", // "( )"
      ],
      "settings": {
        "foreground": "#A9A9A9"
      }
    },
    //
    // "( )" round braces in a function/method definition:
    {
      "scope": [
        "punctuation.definition.parameters",
        "meta.parameters punctuation.definition.parameters", // "( )" in function/method definition
      ],
      "settings": {
        "foreground": "#A9A9A9"
      }
    },
    //
    // [ ] square brackets:
    {
      "scope": [
        "meta.brace.square", // [ ]
      ],
      "settings": {
        "foreground": "#A9A9A9"
      }
    },
    //
    // [ ] square brackets in array definition:
    {
      "scope": [
        "meta.type.tuple meta.brace.square", // [ ] brackets for array definition
        "meta.array.literal meta.brace.square" // [ ]
      ],
      "settings": {
        "foreground": "#A9A9A9",
      }
    },
    //
    //
    //
    // ====================================================
    // TypeScript, JavaScript, React (.ts, .js, .tsx, .jsx):
    //
    //
    //
    // Import syntax in TypeScript / JavaScript:
    //
    // Variable names in the import syntax:
    {
      "scope": [
        "source.ts meta.import variable.other.readwrite",
        "source.js meta.import variable.other.readwrite",
        "source.tsx meta.import variable.other.readwrite",
        "source.jsx meta.import variable.other.readwrite",
        "meta.embedded.block.javascript meta.import variable.other.readwrite",
      ],
      "settings": {
        "foreground": "#000000"
      }
    },
    //
    // Variable names alias in the import syntax:
    {
      "scope": [
        "source.ts meta.import variable.other.readwrite.alias",
        "source.js meta.import variable.other.readwrite.alias",
        "source.tsx meta.import variable.other.readwrite.alias",
        "source.jsx meta.import variable.other.readwrite.alias",
        "meta.embedded.block.javascript meta.import variable.other.readwrite.alias",
      ],
      "settings": {
        "foreground": "#000000"
      }
    },
    //
    // "from", "{ }" in the import syntax:
    {
      "scope": [
        "source.ts keyword.control.from", // from
        "source.js keyword.control.from", // from
        "source.tsx keyword.control.from", // from
        "source.jsx keyword.control.from", // from
        "meta.embedded.block.javascript keyword.control.from", // from
        "source.ts meta.import punctuation.definition.block", // { }
        "source.js meta.import punctuation.definition.block", // { }
        "source.tsx meta.import punctuation.definition.block", // { }
        "source.jsx meta.import punctuation.definition.block", // { }
        "meta.embedded.block.javascript meta.import punctuation.definition.block", // { }
      ],
      "settings": {
        "foreground": "#A9A9A9"
      }
    },
    //
    // "require" in the import syntax, for example:
    // import mongooseUniqueValidator = require("mongoose-unique-validator");
    {
      "scope": [
        "source.ts meta.import-equals.external keyword.control.require",
        "source.js meta.import-equals.external keyword.control.require",
        "source.tsx meta.import-equals.external keyword.control.require",
        "source.jsx meta.import-equals.external keyword.control.require",
        "meta.embedded.block.javascript meta.import-equals.external keyword.control.require",
      ],
      "settings": {
        "foreground": "#A9A9A9"
      }
    },
    //
    // "as" in the import syntax:
    {
      "scope": [
        "source.ts meta.import keyword.control.as", // "as"
        "source.js meta.import keyword.control.as", // "as"
        "source.tsx meta.import keyword.control.as", // "as"
        "source.jsx meta.import keyword.control.as", // "as"
        "meta.embedded.block.javascript meta.import keyword.control.as", // "as"
      ],
      "settings": {
        "foreground": "#A9A9A9"
      }
    },
    //
    // string for a module path in the import syntax:
    {
      "scope": [
        "source.ts meta.import string",
        "source.js meta.import string",
        "source.tsx meta.import string",
        "source.jsx meta.import string",
        "meta.embedded.block.javascript meta.import string",
      ],
      "settings": {
        "foreground": "#A31515"
      }
    },
    //
    // "type" keyword in the import syntax:
    {
      "scope": [
        // "keyword.control.type":
        "source.ts meta.import keyword.control.type",
        "source.js meta.import keyword.control.type",
        "source.tsx meta.import keyword.control.type",
        "source.jsx meta.import keyword.control.type",
        "meta.embedded.block.javascript meta.import keyword.control.type",
      ],
      "settings": {
        "foreground": "#A9A9A9"
      }
    },
    //
    //
    //
    // Export syntax in TypeScript / JavaScript:
    //
    // "as" keyword in the export syntax:
    {
      "scope": [
        "source.ts meta.export keyword.control.as",
        "source.js meta.export keyword.control.as",
        "source.tsx meta.export keyword.control.as",
        "source.jsx meta.export keyword.control.as",
        "meta.embedded.block.javascript meta.export keyword.control.as",
      ],
      "settings": {
        "foreground": "#A9A9A9"
      }
    },
    //
    // "type" keyword in the export syntax:
    {
      "scope": [
        // "keyword.control.type":
        "source.ts meta.export keyword.control.type",
        "source.js meta.export keyword.control.type",
        "source.tsx meta.export keyword.control.type",
        "source.jsx meta.export keyword.control.type",
        "meta.embedded.block.javascript meta.export keyword.control.type",
      ],
      "settings": {
        "foreground": "#A31515"
      }
    },
    //
    //
    //
    // Normal code, not import, in TypeScript:
    //
    // Names:
    //
    // Types:
    //
    // type name during declaration:
    {
      "scope": [
        // class:
        "source.ts entity.name.type.class", // class name during declaration
        "source.js entity.name.type.class", // class name during declaration
        "source.tsx entity.name.type.class", // class name during declaration
        "source.jsx entity.name.type.class", // class name during declaration
        "meta.embedded.block.javascript entity.name.type.class", // class name during declaration
        // interface:
        "source.ts entity.name.type.interface", // interface name during declaration
        "source.js entity.name.type.interface", // interface name during declaration
        "source.tsx entity.name.type.interface", // interface name during declaration
        "source.jsx entity.name.type.interface", // interface name during declaration
        "meta.embedded.block.javascript entity.name.type.interface", // interface name during declaration
        // enum:
        "source.ts entity.name.type.enum", // enum name during declaration
        "source.js entity.name.type.enum", // enum name during declaration
        "source.tsx entity.name.type.enum", // enum name during declaration
        "source.jsx entity.name.type.enum", // enum name during declaration
        "meta.embedded.block.javascript entity.name.type.enum", // enum name during declaration
        // alias:
        "source.ts entity.name.type.alias", // alias name during declaration
        "source.js entity.name.type.alias", // alias name during declaration
        "source.tsx entity.name.type.alias", // alias name during declaration
        "source.jsx entity.name.type.alias", // alias name during declaration
        "meta.embedded.block.javascript entity.name.type.alias", // alias name during declaration
      ],
      "settings": {
        "foreground": "#0000CC",
        "fontStyle": "bold"
      }
    },
    //
    // type name during use:
    {
      "scope": [
        "source.ts entity.name.type",
        "source.js entity.name.type",
        "source.tsx entity.name.type",
        "source.jsx entity.name.type",
        "meta.embedded.block.javascript entity.name.type",
      ],
      "settings": {
        "foreground": "#E8810C",
      }
    },
    //
    // namespace name during declaration, namespace "JSX":
    {
      "scope": [
        // top-level namespace declaration:
        "source.ts meta.namespace.declaration entity.name.type.module",
        "source.js meta.namespace.declaration entity.name.type.module",
        "source.tsx meta.namespace.declaration entity.name.type.module",
        "source.jsx meta.namespace.declaration entity.name.type.module",
        "meta.embedded.block.javascript meta.namespace.declaration entity.name.type.module",
        // nested inside one-level deep namespace declaration:
        "source.ts meta.namespace.declaration meta.block meta.namespace.declaration entity.name.type.module",
        "source.js meta.namespace.declaration meta.block meta.namespace.declaration entity.name.type.module",
        "source.tsx meta.namespace.declaration meta.block meta.namespace.declaration entity.name.type.module",
        "source.jsx meta.namespace.declaration meta.block meta.namespace.declaration entity.name.type.module",
        "meta.embedded.block.javascript meta.namespace.declaration meta.block meta.namespace.declaration entity.name.type.module",
        // nested inside two-levels deep namespace declaration:
        "source.ts meta.namespace.declaration meta.block meta.namespace.declaration meta.block meta.namespace.declaration entity.name.type.module",
        "source.js meta.namespace.declaration meta.block meta.namespace.declaration meta.block meta.namespace.declaration entity.name.type.module",
        "source.tsx meta.namespace.declaration meta.block meta.namespace.declaration meta.block meta.namespace.declaration entity.name.type.module",
        "source.jsx meta.namespace.declaration meta.block meta.namespace.declaration meta.block meta.namespace.declaration entity.name.type.module",
        "meta.embedded.block.javascript meta.namespace.declaration meta.block meta.namespace.declaration meta.block meta.namespace.declaration entity.name.type.module",
      ],
      "settings": {
        "foreground": "#0000CC",
        "fontStyle": "bold"
      }
    },
    //
    // module name during use, "React".Component, "JSX".whatever:
    {
      "scope": [
        // normal case:
        "source.ts entity.name.type.module",
        "source.js entity.name.type.module",
        "source.tsx entity.name.type.module",
        "source.jsx entity.name.type.module",
        "meta.embedded.block.javascript entity.name.type.module",
        // nested inside top-level namespace declaration:
        "source.ts meta.namespace.declaration meta.block entity.name.type.module",
        "source.js meta.namespace.declaration meta.block entity.name.type.module",
        "source.tsx meta.namespace.declaration meta.block entity.name.type.module",
        "source.jsx meta.namespace.declaration meta.block entity.name.type.module",
        "meta.embedded.block.javascript meta.namespace.declaration meta.block entity.name.type.module",
        // nested inside one-level deep namespace declaration:
        "source.ts meta.namespace.declaration meta.block meta.namespace.declaration meta.block entity.name.type.module",
        "source.js meta.namespace.declaration meta.block meta.namespace.declaration meta.block entity.name.type.module",
        "source.tsx meta.namespace.declaration meta.block meta.namespace.declaration meta.block entity.name.type.module",
        "source.jsx meta.namespace.declaration meta.block meta.namespace.declaration meta.block entity.name.type.module",
        "meta.embedded.block.javascript meta.namespace.declaration meta.block meta.namespace.declaration meta.block entity.name.type.module",
        // nested inside two-levels deep namespace declaration:
        "source.ts meta.namespace.declaration meta.block meta.namespace.declaration meta.block meta.namespace.declaration meta.block entity.name.type.module",
        "source.js meta.namespace.declaration meta.block meta.namespace.declaration meta.block meta.namespace.declaration meta.block entity.name.type.module",
        "source.tsx meta.namespace.declaration meta.block meta.namespace.declaration meta.block meta.namespace.declaration meta.block entity.name.type.module",
        "source.jsx meta.namespace.declaration meta.block meta.namespace.declaration meta.block meta.namespace.declaration meta.block entity.name.type.module",
        "meta.embedded.block.javascript meta.namespace.declaration meta.block meta.namespace.declaration meta.block meta.namespace.declaration meta.block entity.name.type.module",
      ],
      "settings": {
        "foreground": "#E8810C",
      }
    },
    //
    // inherited type name:
    {
      "scope": [
        "source.ts entity.other.inherited-class", // inherited type names
        "source.js entity.other.inherited-class", // inherited type names
        "source.tsx entity.other.inherited-class", // inherited type names
        "source.jsx entity.other.inherited-class", // inherited type names
        "meta.embedded.block.javascript entity.other.inherited-class", // inherited type names
      ],
      "settings": {
        "foreground": "#E8810C",
      }
    },
    //
    //
    //
    // Functions:
    //
    // function name in the declaration:
    {
      "scope": [
        "source.ts meta.definition.function entity.name.function", // function name in the declaration
        "source.js meta.definition.function entity.name.function", // function name in the declaration
        "source.tsx meta.definition.function entity.name.function", // function name in the declaration
        "source.jsx meta.definition.function entity.name.function", // function name in the declaration
        "meta.embedded.block.javascript meta.definition.function entity.name.function", // function name in the declaration
      ],
      "settings": {
        "foreground": "#0000CC",
        "fontStyle": "bold"
      }
    },
    //
    // function arguments in declaration:
    {
      "scope": [
        // for when the argument is a callback function:
        "source.ts meta.parameters entity.name.function",
        "source.js meta.parameters entity.name.function",
        "source.tsx meta.parameters entity.name.function",
        "source.jsx meta.parameters entity.name.function",
        "meta.embedded.block.javascript meta.parameters entity.name.function",
      ],
      "settings": {
        "foreground": "#C344AB"
      }
    },
    //
    // function variable name:
    {
      "scope": [
        "source.ts entity.name.function", // function calls
        "source.js entity.name.function", // function calls
        "source.tsx entity.name.function", // function calls
        "source.jsx entity.name.function", // function calls
        "meta.embedded.block.javascript entity.name.function", // function calls
      ],
      "settings": {
        "foreground": "#000000"
      }
    },
    //
    // function variable name during its call:
    {
      "scope": [
        "source.ts meta.function-call entity.name.function", // function call
        "source.js meta.function-call entity.name.function", // function call
        "source.tsx meta.function-call entity.name.function", // function call
        "source.jsx meta.function-call entity.name.function", // function call
        "meta.embedded.block.javascript meta.function-call entity.name.function", // function call
        "source.ts meta.function-call support", // function call
        "source.js meta.function-call support", // function call
        "source.tsx meta.function-call support", // function call
        "source.jsx meta.function-call support", // function call
        "meta.embedded.block.javascript meta.function-call support", // function call
        "source.ts meta.function-call support.function", // function call
        "source.js meta.function-call support.function", // function call
        "source.tsx meta.function-call support.function", // function call
        "source.jsx meta.function-call support.function", // function call
        "meta.embedded.block.javascript meta.function-call support.function", // function call
        "source.ts meta.function-call keyword.operator.expression.import", // "import" as function call
        "source.js meta.function-call keyword.operator.expression.import", // "import" as function call
        "source.tsx meta.function-call keyword.operator.expression.import", // "import" as function call
        "source.jsx meta.function-call keyword.operator.expression.import", // "import" as function call
        "meta.embedded.block.javascript meta.function-call keyword.operator.expression.import", // "import" as function call
        // Fix for the TypeScript code embedded in the styled-components syntax:
        "source.ts source.css meta.embedded.line entity.name.function",
        "source.js source.css meta.embedded.line entity.name.function",
        "source.tsx source.css meta.embedded.line entity.name.function",
        "source.jsx source.css meta.embedded.line entity.name.function",
        "meta.embedded.block.javascript source.css meta.embedded.line entity.name.function",
        // Fix for the TypeScript template literal call like in the styled-components syntax:
        "source.ts entity.name.function.tagged-template variable.other.property",
        "source.js entity.name.function.tagged-template variable.other.property",
        "source.tsx entity.name.function.tagged-template variable.other.property",
        "source.jsx entity.name.function.tagged-template variable.other.property",
        "meta.embedded.block.javascript entity.name.function.tagged-template variable.other.property",
      ],
      "settings": {
        "foreground": "#0000CC"
      }
    },
    //
    {
      "scope": [
        "source.ts meta.function-call support.class", // function call
        "source.js meta.function-call support.class", // function call
        "source.tsx meta.function-call support.class", // function call
        "source.jsx meta.function-call support.class", // function call
        "meta.embedded.block.javascript meta.function-call support.class", // function call
      ],
      "settings": {
        "foreground": "#E8810C"
      }
    },
    //
    // function parameters in function call:
    {
      "scope": [
        "source.ts variable.other.readwrite", // function parameters
        "source.js variable.other.readwrite", // function parameters
        "source.tsx variable.other.readwrite", // function parameters
        "source.jsx variable.other.readwrite", // function parameters
        "meta.embedded.block.javascript variable.other.readwrite", // function parameters
      ],
      "settings": {
        "foreground": "#000000"
      }
    },
    //
    //
    //
    // "@Length" decorator syntax:
    //
    // "@" in decorator syntax:
    {
      "scope": [
        "source.ts meta.decorator punctuation.decorator",
        "source.js meta.decorator punctuation.decorator",
        "source.tsx meta.decorator punctuation.decorator",
        "source.jsx meta.decorator punctuation.decorator",
        "meta.embedded.block.javascript meta.decorator punctuation.decorator",
      ],
      "settings": {
        "foreground": "#C344AB"
      }
    },
    //
    // Name or identifier in decorator syntax:
    {
      "scope": [
        "source.ts meta.decorator meta.function-call entity.name.function",
        "source.js meta.decorator meta.function-call entity.name.function",
        "source.tsx meta.decorator meta.function-call entity.name.function",
        "source.jsx meta.decorator meta.function-call entity.name.function",
        "meta.embedded.block.javascript meta.decorator meta.function-call entity.name.function",
      ],
      "settings": {
        "foreground": "#C344AB"
      }
    },
    //
    //
    //
    // Variable and property names in use:
    {
      "scope": [
        "source.ts meta.embedded.expression variable.other.readwrite",
        "source.js meta.embedded.expression variable.other.readwrite",
        "source.tsx meta.embedded.expression variable.other.readwrite",
        "source.jsx meta.embedded.expression variable.other.readwrite",
        "meta.embedded.block.javascript meta.embedded.expression variable.other.readwrite",
        "source.ts support.variable.object",
        "source.js support.variable.object",
        "source.tsx support.variable.object",
        "source.jsx support.variable.object",
        "meta.embedded.block.javascript support.variable.object",
        "source.ts support.class",
        "source.js support.class",
        "source.tsx support.class",
        "source.jsx support.class",
        "meta.embedded.block.javascript support.class",
        "source.ts support.variable.property",
        "source.js support.variable.property",
        "source.tsx support.variable.property",
        "source.jsx support.variable.property",
        "meta.embedded.block.javascript.jsx support.variable.property",
        "source.ts variable.other.property",
        "source.js variable.other.property",
        "source.tsx variable.other.property",
        "source.jsx variable.other.property",
        "meta.embedded.block.javascript variable.other.property",
        // "source.css variable":
        // Fix for the variables and properties in styled-components syntax.
        "source.ts source.css variable.other.object",
        "source.js source.css variable.other.object",
        "source.tsx source.css variable.other.object",
        "source.jsx source.css variable.other.object",
        "meta.embedded.block.javascript source.css variable.other.object",
        // introduced for embedded blocks in Markdown:
        "markup.fenced_code.block.markdown support.variable.property.ts",
        "markup.fenced_code.block.markdown support.variable.property.js"
      ],
      "settings": {
        "foreground": "#000000",
      }
    },
    //
    // property name in declaration:
    {
      "scope": [
        "source.ts meta.definition.property variable.object.property",
        "source.js meta.definition.property variable.object.property",
        "source.tsx meta.definition.property variable.object.property",
        "source.jsx meta.definition.property variable.object.property",
        "meta.embedded.block.javascript meta.definition.property variable.object.property",
      ],
      "settings": {
        "foreground": "#0000CC"
      }
    },
    //
    // variable name in declaration:
    {
      "scope": [
        "source.ts meta.definition entity.name.function",
        "source.js meta.definition entity.name.function",
        "source.tsx meta.definition entity.name.function",
        "source.jsx meta.definition entity.name.function",
        "meta.embedded.block.javascript meta.definition entity.name.function",
      ],
      "settings": {
        "foreground": "#0000CC"
      }
    },
    //
    // key name in an object:
    {
      "scope": [
        "source.ts meta.object-literal.key",
        "source.js meta.object-literal.key",
        "source.tsx meta.object-literal.key",
        "source.jsx meta.object-literal.key",
        "meta.embedded.block.javascript meta.object-literal.key",
      ],
      "settings": {
        "foreground": "#C344AB"
      }
    },
    //
    // key name in an object, if it's a function:
    {
      "scope": [
        "source.ts meta.object-literal.key entity.name.function",
        "source.js meta.object-literal.key entity.name.function",
        "source.tsx meta.object-literal.key entity.name.function",
        "source.jsx meta.object-literal.key entity.name.function",
        "meta.embedded.block.javascript meta.object-literal.key entity.name.function",
      ],
      "settings": {
        "foreground": "#C344AB"
      }
    },
    //
    // Configuration in JS file, like in JSON,
    // object keys when instantiating an object:
    {
      "scope": [
        "source.ts meta.object-literal.key string.quoted",
        "source.js meta.object-literal.key string.quoted",
        "source.tsx meta.object-literal.key string.quoted",
        "source.jsx meta.object-literal.key string.quoted",
        "meta.embedded.block.javascript meta.object-literal.key string.quoted",
      ],
      "settings": {
        "foreground": "#C344AB"
      }
    },
    //
    // function name in declaration after "var, let, const":
    {
      "scope": [
        "source.ts meta.definition variable.other entity.name.function", // variable name after "var, let, const"
        "source.js meta.definition variable.other entity.name.function", // variable name after "var, let, const"
        "source.tsx meta.definition variable.other entity.name.function", // variable name after "var, let, const"
        "source.jsx meta.definition variable.other entity.name.function", // variable name after "var, let, const"
        "meta.embedded.block.javascript meta.definition variable.other entity.name.function", // variable name after "var, let, const"
        "source.ts meta.definition.variable entity.name.function", // variable name after "var, let, const"
        "source.js meta.definition.variable entity.name.function", // variable name after "var, let, const"
        "source.tsx meta.definition.variable entity.name.function", // variable name after "var, let, const"
        "source.jsx meta.definition.variable entity.name.function", // variable name after "var, let, const"
        "meta.embedded.block.javascript meta.definition.variable entity.name.function", // variable name after "var, let, const"
      ],
      "settings": {
        "foreground": "#000000"
      }
    },
    //
    // variable name in declaration after "var, let, const":
    {
      "scope": [
        "source.ts meta.definition variable.other", // variable name after "var, let, const"
        "source.js meta.definition variable.other", // variable name after "var, let, const"
        "source.tsx meta.definition variable.other", // variable name after "var, let, const"
        "source.jsx meta.definition variable.other", // variable name after "var, let, const"
        "meta.embedded.block.javascript meta.definition variable.other", // variable name after "var, let, const"
        "source.ts meta.definition variable.other.readwrite", // variable name after "var, let, const"
        "source.js meta.definition variable.other.readwrite", // variable name after "var, let, const"
        "source.tsx meta.definition variable.other.readwrite", // variable name after "var, let, const"
        "source.jsx meta.definition variable.other.readwrite", // variable name after "var, let, const"
        "meta.embedded.block.javascript meta.definition variable.other.readwrite", // variable name after "var, let, const"
      ],
      "settings": {
        "foreground": "#000000"
      }
    },
    //
    // variable name in declaration like here:
    //  for (let [key, value] of Object.entries(localStorage)) {
    {
      "scope": [
        "source.ts meta.array-binding-pattern-variable meta.definition variable.other.readwrite", // variable name after "var, let, const"
        "source.js meta.array-binding-pattern-variable meta.definition variable.other.readwrite", // variable name after "var, let, const"
        "source.tsx meta.array-binding-pattern-variable meta.definition variable.other.readwrite", // variable name after "var, let, const"
        "source.jsx meta.array-binding-pattern-variable meta.definition variable.other.readwrite", // variable name after "var, let, const"
        "meta.embedded.block.javascript meta.array-binding-pattern-variable meta.definition variable.other.readwrite", // variable name after "var, let, const"
      ],
      "settings": {
        "foreground": "#000000"
      }
    },
    //
    // property name inside syntax like: "const { prop: { subProp } }"
    {
      "scope": [
        "source.ts meta.object-binding-pattern-variable variable.object.property",
        "source.js meta.object-binding-pattern-variable variable.object.property",
        "source.tsx meta.object-binding-pattern-variable variable.object.property",
        "source.jsx meta.object-binding-pattern-variable variable.object.property",
        "meta.embedded.block.javascript meta.object-binding-pattern-variable variable.object.property",
      ],
      "settings": {
        "foreground": "#000000"
      }
    },
    //
    // variable's type parameter:
    {
      "scope": [
        // "meta.type.parameters"
        "source.ts meta.type.parameters entity.name.type",
        "source.js meta.type.parameters entity.name.type",
        "source.tsx meta.type.parameters entity.name.type",
        "source.jsx meta.type.parameters entity.name.type",
        "meta.embedded.block.javascript meta.type.parameters entity.name.type",
        "source.ts meta.type.parameters support.type.builtin",
        "source.js meta.type.parameters support.type.builtin",
        "source.tsx meta.type.parameters support.type.builtin",
        "source.jsx meta.type.parameters support.type.builtin",
        "meta.embedded.block.javascript meta.type.parameters support.type.builtin",
        "source.ts meta.type.parameters support.type.primitive",
        "source.js meta.type.parameters support.type.primitive",
        "source.tsx meta.type.parameters support.type.primitive",
        "source.jsx meta.type.parameters support.type.primitive",
        "meta.embedded.block.javascript meta.type.parameters support.type.primitive",
        // "meta.return.type"
        "source.ts meta.return.type entity.name.type",
        "source.js meta.return.type entity.name.type",
        "source.tsx meta.return.type entity.name.type",
        "source.jsx meta.return.type entity.name.type",
        "meta.embedded.block.javascript meta.return.type entity.name.type",
        "source.ts meta.return.type support.type.builtin",
        "source.js meta.return.type support.type.builtin",
        "source.tsx meta.return.type support.type.builtin",
        "source.jsx meta.return.type support.type.builtin",
        "meta.embedded.block.javascript meta.return.type support.type.builtin",
        "source.ts meta.return.type support.type.primitive",
        "source.js meta.return.type support.type.primitive",
        "source.tsx meta.return.type support.type.primitive",
        "source.jsx meta.return.type support.type.primitive",
        "meta.embedded.block.javascript meta.return.type support.type.primitive",
        // "meta.type.annotation"
        "source.ts meta.type.annotation entity.name.type",
        "source.js meta.type.annotation entity.name.type",
        "source.tsx meta.type.annotation entity.name.type",
        "source.jsx meta.type.annotation entity.name.type",
        "meta.embedded.block.javascript meta.type.annotation entity.name.type",
        "source.ts meta.type.annotation support.type.builtin",
        "source.js meta.type.annotation support.type.builtin",
        "source.tsx meta.type.annotation support.type.builtin",
        "source.jsx meta.type.annotation support.type.builtin",
        "meta.embedded.block.javascript meta.type.annotation support.type.builtin",
        "source.ts meta.type.annotation support.type.primitive",
        "source.js meta.type.annotation support.type.primitive",
        "source.tsx meta.type.annotation support.type.primitive",
        "source.jsx meta.type.annotation support.type.primitive",
        "meta.embedded.block.javascript meta.type.annotation support.type.primitive",
      ],
      "settings": {
        "foreground": "#E8810C"
      }
    },
    //
    // "string", "number" types in situations like this:
    // type TInput = string | number;
    {
      "scope": [
        // "string", "number":
        "source.ts support.type.primitive",
        "source.js support.type.primitive",
        "source.tsx support.type.primitive",
        "source.jsx support.type.primitive",
        "meta.embedded.block.javascript support.type.primitive",
        // "undefined", "null":
        "source.ts support.type.builtin",
        "source.js support.type.builtin",
        "source.tsx support.type.builtin",
        "source.jsx support.type.builtin",
        "meta.embedded.block.javascript support.type.builtin",
      ],
      "settings": {
        "foreground": "#E8810C"
      }
    },
    //
    // variable's type parameter signs:
    {
      "scope": [
        "source.ts meta.type.annotation meta.brace.square", // []
        "source.js meta.type.annotation meta.brace.square", // []
        "source.tsx meta.type.annotation meta.brace.square", // []
        "source.jsx meta.type.annotation meta.brace.square", // []
        "meta.embedded.block.javascript meta.type.annotation meta.brace.square", // []
        "source.ts meta.type.parameters meta.brace.square", // []
        "source.js meta.type.parameters meta.brace.square", // []
        "source.tsx meta.type.parameters meta.brace.square", // []
        "source.jsx meta.type.parameters meta.brace.square", // []
        "meta.embedded.block.javascript meta.type.parameters meta.brace.square", // []
        "source.ts meta.return.type meta.brace.square", // []
        "source.js meta.return.type meta.brace.square", // []
        "source.tsx meta.return.type meta.brace.square", // []
        "source.jsx meta.return.type meta.brace.square", // []
        "meta.embedded.block.javascript meta.return.type meta.brace.square", // []
        "source.ts keyword.operator.type", // |
        "source.js keyword.operator.type", // |
        "source.tsx keyword.operator.type", // |
        "source.jsx keyword.operator.type", // |
        "meta.embedded.block.javascript keyword.operator.type" // |
      ],
      "settings": {
        "foreground": "#A9A9A9"
      }
    },
    //
    // "module.exports" :
    {
      "scope": [
        "source.ts support.type.object.module", // "module.exports"
        "source.js support.type.object.module", // "module.exports"
        "source.tsx support.type.object.module", // "module.exports"
        "source.jsx support.type.object.module", // "module.exports"
        "meta.embedded.block.javascript support.type.object.module", // "module.exports"
      ],
      "settings": {
        "foreground": "#000000"
      }
    },
    //
    {
      "scope": [
        "source.ts constant.language.import-export-all", // export *
        "source.js constant.language.import-export-all", // export *
        "source.tsx constant.language.import-export-all", // export *
        "source.jsx constant.language.import-export-all", // export *
        "meta.embedded.block.javascript constant.language.import-export-all", // export *
      ],
      "settings": {
        "foreground": "#000000"
      }
    },
    //
    //
    //
    // Keywords in TypeScript:
    //
    // control flow keywords:
    {
      "scope": [
        "source.ts keyword.control", // const, function, inteface, class
        "source.js keyword.control", // const, function, inteface, class
        "source.tsx keyword.control", // const, function, inteface, class
        "source.jsx keyword.control", // const, function, inteface, class
        "meta.embedded.block.javascript keyword.control", // const, function, inteface, class
        "source.ts keyword.operator.expression.of", // for (const a "of" b)
        "source.js keyword.operator.expression.of", // for (const a "of" b)
        "source.tsx keyword.operator.expression.of", // for (const a "of" b)
        "source.jsx keyword.operator.expression.of", // for (const a "of" b)
        "meta.embedded.block.javascript keyword.operator.expression.of", // for (const a "of" b)
      ],
      "settings": {
        "foreground": "#0BC5E3"
      }
    },
    //
    // "break", "continue", "for" keywords:
    // Cannot change it to purple, because it also changes the "for" keyword.
    {
      "scope": [
        "source.ts keyword.control.loop", // "break", "continue", "for"
        "source.js keyword.control.loop", // "break", "continue", "for"
        "source.tsx keyword.control.loop", // "break", "continue", "for"
        "source.jsx keyword.control.loop", // "break", "continue", "for"
        "meta.embedded.block.javascript keyword.control.loop", // "break", "continue", "for"
      ],
      "settings": {
        "foreground": "#0BC5E3"
      }
    },
    //
    // "as" keyword for casting:
    {
      "scope": [
        "source.ts keyword.control.as", // "as"
        "source.js keyword.control.as", // "as"
        "source.tsx keyword.control.as", // "as"
        "source.jsx keyword.control.as", // "as"
        "meta.embedded.block.javascript keyword.control.as", // "as"
      ],
      "settings": {
        "foreground": "#0BC5E3"
      }
    },
    //
    // "delete" property keyword:
    {
      "scope": [
        "keyword.operator.expression.delete.ts",
        "keyword.operator.expression.delete.js",
        "keyword.operator.expression.delete.tsx",
        "keyword.operator.expression.delete.jsx",
      ],
      "settings": {
        "foreground": "#0BC5E3"
      }
    },
    //
    // "debugger" keyword:
    {
      "scope": [
        "keyword.other.debugger.ts",
        "keyword.other.debugger.js",
        "keyword.other.debugger.tsx",
        "keyword.other.debugger.jsx",
      ],
      "settings": {
        "foreground": "#0BC5E3"
      }
    },
    //
    // type keywords:
    {
      "scope": [
        // "storage.type":
        "source.ts storage.type", // const, function, inteface, class, type
        "source.js storage.type", // const, function, inteface, class, type
        "source.tsx storage.type", // const, function, inteface, class, type
        "source.jsx storage.type", // const, function, inteface, class, type
        "meta.embedded.block.javascript storage.type", // const, function, inteface, class, type
      ],
      "settings": {
        "foreground": "#A31515"
      }
    },
    //
    // override "get" (inside of a class) keyword:
    {
      "scope": [
        "source.ts storage.type.property", // get; need this to not override "get" with other rules
        "source.js storage.type.property", // get; need this to not override "get" with other rules
        "source.tsx storage.type.property", // get; need this to not override "get" with other rules
        "source.jsx storage.type.property", // get; need this to not override "get" with other rules
        "meta.embedded.block.javascript storage.type.property", // get; need this to not override "get" with other rules
      ],
      "settings": {
        "foreground": "#A31515"
      }
    },
    //
    // "function" keyword:
    {
      "scope": [
        "source.ts meta.var.expr storage.type.function",
        "source.js meta.var.expr storage.type.function",
        "source.tsx meta.var.expr storage.type.function",
        "source.jsx meta.var.expr storage.type.function",
        "meta.embedded.block.javascript meta.var.expr storage.type.function",
        "source.ts meta.function.expression storage.type.function",
        "source.js meta.function.expression storage.type.function",
        "source.tsx meta.function.expression storage.type.function",
        "source.jsx meta.function.expression storage.type.function",
        "meta.embedded.block.javascript meta.function.expression storage.type.function",
        "source.ts meta.function storage.type.function",
        "source.js meta.function storage.type.function",
        "source.tsx meta.function storage.type.function",
        "source.jsx meta.function storage.type.function",
        "meta.embedded.block.javascript meta.function storage.type.function",
      ],
      "settings": {
        "foreground": "#A31515"
      }
    },
    //
    // 1. "constructor" in a class,
    // 2. sometimes it can also select "let, const, var" - this needs to be fixed below this rule.
    {
      "scope": [
        "source.ts meta.method.declaration storage.type", // constructor
        "source.js meta.method.declaration storage.type", // constructor
        "source.tsx meta.method.declaration storage.type", // constructor
        "source.jsx meta.method.declaration storage.type", // constructor
        "meta.embedded.block.javascript meta.method.declaration storage.type", // constructor
      ],
      "settings": {
        "foreground": "#0000CC"
      }
    },
    //
    // 1. Fix to the above constructor rule.
    // 2. "var", "let", "const", "as".
    {
      "scope": [
        "source.ts meta.method.declaration meta.block storage.type", // Fix to the above constructor rule.
        "source.js meta.method.declaration meta.block storage.type", // Fix to the above constructor rule.
        "source.tsx meta.method.declaration meta.block storage.type", // Fix to the above constructor rule.
        "source.jsx meta.method.declaration meta.block storage.type", // Fix to the above constructor rule.
        "meta.embedded.block.javascript meta.method.declaration meta.block storage.type", // Fix to the above constructor rule.
        "source.ts meta.var.expr storage.type", // "var", "let", "const"
        "source.js meta.var.expr storage.type", // "var", "let", "const"
        "source.tsx meta.var.expr storage.type", // "var", "let", "const"
        "source.jsx meta.var.expr storage.type", // "var", "let", "const"
        "meta.embedded.block.javascript meta.var.expr storage.type", // "var", "let", "const"
      ],
      "settings": {
        "foreground": "#A9A9A9"
      }
    },
    //
    // the most usual keywords at the line start:
    {
      "scope": [
        "source.ts storage.modifier", // "static", "extends"
        "source.js storage.modifier", // "static", "extends"
        "source.tsx storage.modifier", // "static", "extends"
        "source.jsx storage.modifier", // "static", "extends"
        "meta.embedded.block.javascript storage.modifier", // "static", "extends"
      ],
      "settings": {
        "foreground": "#A31515"
      }
    },
    //
    // "export" keyword:
    {
      "scope": [
        "source.ts keyword.control.export",
        "source.js keyword.control.export",
        "source.tsx keyword.control.export",
        "source.jsx keyword.control.export",
        "meta.embedded.block.javascript keyword.control.export",
      ],
      "settings": {
        "foreground": "#A31515",
      }
    },
    //
    // "default" keyword:
    {
      "scope": [
        "source.ts keyword.control.default",
        "source.js keyword.control.default",
        "source.tsx keyword.control.default",
        "source.jsx keyword.control.default",
        "meta.embedded.block.javascript keyword.control.default",
      ],
      "settings": {
        "foreground": "#A31515"
      }
    },
    //
    // "async" keyword:
    {
      "scope": [
        "source.ts storage.modifier.async",
        "source.js storage.modifier.async",
        "source.tsx storage.modifier.async",
        "source.jsx storage.modifier.async",
        "meta.embedded.block.javascript storage.modifier.async"
      ],
      "settings": {
        "foreground": "#A31515"
      }
    },
    //
    // variable.language:
    {
      "scope": [
        "source.ts variable.language",
        "source.js variable.language",
        "source.tsx variable.language",
        "source.jsx variable.language",
        "meta.embedded.block.javascript variable.language",
      ],
      "settings": {
        "foreground": "#000000"
      }
    },
    //
    // "this" keyword:
    {
      "scope": [
        "source.ts variable.language.this",
        "source.js variable.language.this",
        "source.tsx variable.language.this",
        "source.jsx variable.language.this",
        "meta.embedded.block.javascript variable.language.this",
      ],
      "settings": {
        "foreground": "#C344AB"
      }
    },
    //
    // "super" keyword:
    {
      "scope": [
        "source.ts variable.language.super",
        "source.js variable.language.super",
        "source.tsx variable.language.super",
        "source.jsx variable.language.super",
        "meta.embedded.block.javascript variable.language.super",
      ],
      "settings": {
        "foreground": "#C344AB"
      }
    },
    //
    // "typeof", "instanceof", "keyof", "in" keywords:
    {
      "scope": [
        // "typeof":
        "source.ts keyword.operator.expression.typeof",
        "source.js keyword.operator.expression.typeof",
        "source.tsx keyword.operator.expression.typeof",
        "source.jsx keyword.operator.expression.typeof",
        "meta.embedded.block.javascript keyword.operator.expression.typeof",
        // "instanceof":
        "source.ts keyword.operator.expression.instanceof",
        "source.js keyword.operator.expression.instanceof",
        "source.tsx keyword.operator.expression.instanceof",
        "source.jsx keyword.operator.expression.instanceof",
        "meta.embedded.block.javascript keyword.operator.expression.instanceof",
        // "keyof":
        "source.ts keyword.operator.expression.keyof",
        "source.js keyword.operator.expression.keyof",
        "source.tsx keyword.operator.expression.keyof",
        "source.jsx keyword.operator.expression.keyof",
        "meta.embedded.block.javascript keyword.operator.expression.keyof",
        // "in":
        "source.ts keyword.operator.expression.in",
        "source.js keyword.operator.expression.in",
        "source.tsx keyword.operator.expression.in",
        "source.jsx keyword.operator.expression.in",
        "meta.embedded.block.javascript keyword.operator.expression.in",
      ],
      "settings": {
        "foreground": "#0BC5E3"
      }
    },
    //
    // "undefined", "any", "true", "false" constants:
    {
      "scope": [
        "source.ts constant.language", // "undefined", "any", "true", "false"
        "source.js constant.language", // "undefined", "any", "true", "false"
        "source.tsx constant.language", // "undefined", "any", "true", "false"
        "source.jsx constant.language", // "undefined", "any", "true", "false"
        "meta.embedded.block.javascript constant.language", // "undefined", "any", "true", "false"
        "source.ts support.type",
        "source.js support.type",
        "source.tsx support.type",
        "source.jsx support.type",
        "meta.embedded.block.javascript support.type",
      ],
      "settings": {
        "foreground": "#A31515"
      }
    },
    //
    // "new" syntax:
    //
    // "new" keyword:
    {
      "scope": [
        "source.ts keyword.operator.new",
        "source.js keyword.operator.new",
        "source.tsx keyword.operator.new",
        "source.jsx keyword.operator.new",
        "meta.embedded.block.javascript keyword.operator.new",
        // This rule was useful at least once for React.ClassType in "index.d.ts":
        "source.ts keyword.control.new",
        "source.js keyword.control.new",
        "source.tsx keyword.control.new",
        "source.jsx keyword.control.new",
        "meta.embedded.block.javascript keyword.control.new",
      ],
      "settings": {
        "foreground": "#0000CC"
      }
    },
    //
    // new "MyClass"():
    {
      "scope": [
        "source.ts new.expr entity.name.type",
        "source.js new.expr entity.name.type",
        "source.tsx new.expr entity.name.type",
        "source.jsx new.expr entity.name.type",
        "meta.embedded.block.javascript new.expr entity.name.type",
      ],
      "settings": {
        "foreground": "#0000CC"
      }
    },
    //
    {
      "scope": [
        "source.ts new.expr meta.function-call support.class", // function call
        "source.js new.expr meta.function-call support.class", // function call
        "source.tsx new.expr meta.function-call support.class", // function call
        "source.jsx new.expr meta.function-call support.class", // function call
        "meta.embedded.block.javascript new.expr meta.function-call support.class", // function call
      ],
      "settings": {
        "foreground": "#0000CC"
      }
    },
    //
    // It works right in cases like " new RegExp(); "
    // It has issues in cases like " await new Promise((obj) => setTimeout(obj, 1000)); "
    {
      "scope": [
        "source.ts new.expr meta.function-call entity.name.function",
        "source.js new.expr meta.function-call entity.name.function",
        "source.tsx new.expr meta.function-call entity.name.function",
        "source.jsx new.expr meta.function-call entity.name.function",
        "meta.embedded.block.javascript new.expr meta.function-call entity.name.function",
      ],
      "settings": {
        "foreground": "#0000CC"
      }
    },
    //
    //
    //
    // Punctuation in TypeScript:
    //
    // "()" round braces:
    {
      "scope": [
        "source.ts meta.brace.round", // "()"
        "source.js meta.brace.round", // "()"
        "source.tsx meta.brace.round", // "()"
        "source.jsx meta.brace.round", // "()"
        "meta.embedded.block.javascript meta.brace.round", // "()"
      ],
      "settings": {
        "foreground": "#A9A9A9"
      }
    },
    //
    // "( )" round braces in a type annotation of arrow function:
    {
      "scope": [
        // general case:
        "source.ts meta.type.annotation meta.parameters punctuation.definition.parameters",
        "source.js meta.type.annotation meta.parameters punctuation.definition.parameters",
        "source.tsx meta.type.annotation meta.parameters punctuation.definition.parameters",
        "source.jsx meta.type.annotation meta.parameters punctuation.definition.parameters",
        "meta.embedded.block.javascript meta.type.annotation meta.parameters punctuation.definition.parameters",
        //
        "source.ts meta.type.declaration meta.parameters punctuation.definition.parameters",
        "source.js meta.type.declaration meta.parameters punctuation.definition.parameters",
        "source.tsx meta.type.declaration meta.parameters punctuation.definition.parameters",
        "source.jsx meta.type.declaration meta.parameters punctuation.definition.parameters",
        "meta.embedded.block.javascript meta.type.declaration meta.parameters punctuation.definition.parameters",
        // fix for a nested case:
        "source.ts meta.type.annotation meta.parameters meta.type.annotation punctuation.definition.parameters",
        "source.js meta.type.annotation meta.parameters meta.type.annotation punctuation.definition.parameters",
        "source.tsx meta.type.annotation meta.parameters meta.type.annotation punctuation.definition.parameters",
        "source.jsx meta.type.annotation meta.parameters meta.type.annotation punctuation.definition.parameters",
        "meta.embedded.block.javascript meta.type.annotation meta.parameters meta.type.annotation punctuation.definition.parameters",
      ],
      "settings": {
        "foreground": "#E8810C",
      }
    },
    //
    // fix for the prev rule:
    {
      "scope": [
        // general case:
        "source.ts meta.type.annotation meta.method.declaration meta.parameters punctuation.definition.parameters",
        "source.js meta.type.annotation meta.method.declaration meta.parameters punctuation.definition.parameters",
        "source.tsx meta.type.annotation meta.method.declaration meta.parameters punctuation.definition.parameters",
        "source.jsx meta.type.annotation meta.method.declaration meta.parameters punctuation.definition.parameters",
        "meta.embedded.block.javascript meta.type.annotation meta.method.declaration meta.parameters punctuation.definition.parameters",
        //
        "source.ts meta.type.declaration meta.method.declaration meta.parameters punctuation.definition.parameters",
        "source.js meta.type.declaration meta.method.declaration meta.parameters punctuation.definition.parameters",
        "source.tsx meta.type.declaration meta.method.declaration meta.parameters punctuation.definition.parameters",
        "source.jsx meta.type.declaration meta.method.declaration meta.parameters punctuation.definition.parameters",
        "meta.embedded.block.javascript meta.type.declaration meta.method.declaration meta.parameters punctuation.definition.parameters",
      ],
      "settings": {
        "foreground": "#A9A9A9"
      }
    },
    //
    // ( ) round braces in an arrow function definition:
    {
      "scope": [
        "source.ts meta.arrow meta.parameters punctuation.definition.parameters",
        "source.js meta.arrow meta.parameters punctuation.definition.parameters",
        "source.tsx meta.arrow meta.parameters punctuation.definition.parameters",
        "source.jsx meta.arrow meta.parameters punctuation.definition.parameters",
        "meta.embedded.block.javascript meta.arrow meta.parameters punctuation.definition.parameters",
      ],
      "settings": {
        "foreground": "#0BC5E3",
      }
    },
    //
    //
    //
    // "{ }" for an arrow function definition.
    // Check up to 4 wrap levels for "meta.arrow meta.block".
    // Below are some fixes for this rule.
    {
      "scope": [
        // 1 wrap:
        "source.ts meta.arrow meta.block punctuation.definition.block",
        "source.tsx meta.arrow meta.block punctuation.definition.block",
        "source.js meta.arrow meta.block punctuation.definition.block",
        "source.jsx meta.arrow meta.block punctuation.definition.block",
        "meta.embedded.block.javascript meta.arrow meta.block punctuation.definition.block",
        // 2 wrap:
        "source.ts meta.arrow meta.block meta.arrow meta.block punctuation.definition.block",
        "source.tsx meta.arrow meta.block meta.arrow meta.block punctuation.definition.block",
        "source.js meta.arrow meta.block meta.arrow meta.block punctuation.definition.block",
        "source.jsx meta.arrow meta.block meta.arrow meta.block punctuation.definition.block",
        "meta.embedded.block.javascript meta.arrow meta.block meta.arrow meta.block punctuation.definition.block",
        // 3 wrap:
        "source.ts meta.arrow meta.block meta.arrow meta.block meta.arrow meta.block punctuation.definition.block",
        "source.tsx meta.arrow meta.block meta.arrow meta.block meta.arrow meta.block punctuation.definition.block",
        "source.js meta.arrow meta.block meta.arrow meta.block meta.arrow meta.block punctuation.definition.block",
        "source.jsx meta.arrow meta.block meta.arrow meta.block meta.arrow meta.block punctuation.definition.block",
        "meta.embedded.block.javascript meta.arrow meta.block meta.arrow meta.block meta.arrow meta.block punctuation.definition.block",
        // 4 wrap:
        "source.ts meta.arrow meta.block meta.arrow meta.block meta.arrow meta.block meta.arrow meta.block punctuation.definition.block",
        "source.tsx meta.arrow meta.block meta.arrow meta.block meta.arrow meta.block meta.arrow meta.block punctuation.definition.block",
        "source.js meta.arrow meta.block meta.arrow meta.block meta.arrow meta.block meta.arrow meta.block punctuation.definition.block",
        "source.jsx meta.arrow meta.block meta.arrow meta.block meta.arrow meta.block meta.arrow meta.block punctuation.definition.block",
        "meta.embedded.block.javascript meta.arrow meta.block meta.arrow meta.block meta.arrow meta.block meta.arrow meta.block punctuation.definition.block"
      ],
      "settings": {
        "foreground": "#A9A9A9"
      }
    },
    //
    // For arrow function. Fix the prev rule's function's "{ }" braces for the inner blocks.
    {
      "scope": [
        // 1 wrap:
        "source.ts meta.arrow meta.block meta.block punctuation.definition.block",
        "source.tsx meta.arrow meta.block meta.block punctuation.definition.block",
        "source.js meta.arrow meta.block meta.block punctuation.definition.block",
        "source.jsx meta.arrow meta.block meta.block punctuation.definition.block",
        "meta.embedded.block.javascript meta.arrow meta.block meta.block punctuation.definition.block",
        // 2 wrap:
        "source.ts meta.arrow meta.block meta.arrow meta.block meta.block punctuation.definition.block",
        "source.tsx meta.arrow meta.block meta.arrow meta.block meta.block punctuation.definition.block",
        "source.js meta.arrow meta.block meta.arrow meta.block meta.block punctuation.definition.block",
        "source.jsx meta.arrow meta.block meta.arrow meta.block meta.block punctuation.definition.block",
        "meta.embedded.block.javascript meta.arrow meta.block meta.arrow meta.block meta.block punctuation.definition.block",
        // 3 wrap:
        "source.ts meta.arrow meta.block meta.arrow meta.block meta.arrow meta.block meta.block punctuation.definition.block",
        "source.tsx meta.arrow meta.block meta.arrow meta.block meta.arrow meta.block meta.block punctuation.definition.block",
        "source.js meta.arrow meta.block meta.arrow meta.block meta.arrow meta.block meta.block punctuation.definition.block",
        "source.jsx meta.arrow meta.block meta.arrow meta.block meta.arrow meta.block meta.block punctuation.definition.block",
        "meta.embedded.block.javascript meta.arrow meta.block meta.arrow meta.block meta.arrow meta.block meta.block punctuation.definition.block",
        // check up to 3 times the "meta.arrow meta.block" wrap.
      ],
      "settings": {
        "foreground": "#A9A9A9"
      }
    },
    //
    // For arrow function. Fix the prev rule's function's "{ }" braces for the inner blocks.
    {
      "scope": [
        // 1 wrap:
        "source.ts meta.arrow meta.block switch-statement punctuation.definition.block",
        "source.tsx meta.arrow meta.block switch-statement punctuation.definition.block",
        "source.js meta.arrow meta.block switch-statement punctuation.definition.block",
        "source.jsx meta.arrow meta.block switch-statement punctuation.definition.block",
        "meta.embedded.block.javascript meta.arrow meta.block switch-statement punctuation.definition.block",
        // 2 wrap:
        "source.ts meta.arrow meta.block meta.arrow meta.block switch-statement punctuation.definition.block",
        "source.tsx meta.arrow meta.block meta.arrow meta.block switch-statement punctuation.definition.block",
        "source.js meta.arrow meta.block meta.arrow meta.block switch-statement punctuation.definition.block",
        "source.jsx meta.arrow meta.block meta.arrow meta.block switch-statement punctuation.definition.block",
        "meta.embedded.block.javascript meta.arrow meta.block meta.arrow meta.block switch-statement punctuation.definition.block",
        // 3 wrap:
        "source.ts meta.arrow meta.block meta.arrow meta.block meta.arrow meta.block switch-statement punctuation.definition.block",
        "source.tsx meta.arrow meta.block meta.arrow meta.block meta.arrow meta.block switch-statement punctuation.definition.block",
        "source.js meta.arrow meta.block meta.arrow meta.block meta.arrow meta.block switch-statement punctuation.definition.block",
        "source.jsx meta.arrow meta.block meta.arrow meta.block meta.arrow meta.block switch-statement punctuation.definition.block",
        "meta.embedded.block.javascript meta.arrow meta.block meta.arrow meta.block meta.arrow meta.block switch-statement punctuation.definition.block",
        // check up to 3 times the "meta.arrow meta.block" wrap.
      ],
      "settings": {
        "foreground": "#A9A9A9"
      }
    },
    //
    // For arrow function. Fix the prev rule's function's "{ }" braces for the inner object.
    {
      "scope": [
        // 1 wrap:
        "source.ts meta.arrow meta.block meta.objectliteral punctuation.definition.block",
        "source.tsx meta.arrow meta.block meta.objectliteral punctuation.definition.block",
        "source.js meta.arrow meta.block meta.objectliteral punctuation.definition.block",
        "source.jsx meta.arrow meta.block meta.objectliteral punctuation.definition.block",
        "meta.embedded.block.javascript meta.arrow meta.block meta.objectliteral punctuation.definition.block",
        // 2 wrap:
        "source.ts meta.arrow meta.block meta.arrow meta.block meta.objectliteral punctuation.definition.block",
        "source.tsx meta.arrow meta.block meta.arrow meta.block meta.objectliteral punctuation.definition.block",
        "source.js meta.arrow meta.block meta.arrow meta.block meta.objectliteral punctuation.definition.block",
        "source.jsx meta.arrow meta.block meta.arrow meta.block meta.objectliteral punctuation.definition.block",
        "meta.embedded.block.javascript meta.arrow meta.block meta.arrow meta.block meta.objectliteral punctuation.definition.block",
        // 3 wrap:
        "source.ts meta.arrow meta.block meta.arrow meta.block meta.arrow meta.block meta.objectliteral punctuation.definition.block",
        "source.tsx meta.arrow meta.block meta.arrow meta.block meta.arrow meta.block meta.objectliteral punctuation.definition.block",
        "source.js meta.arrow meta.block meta.arrow meta.block meta.arrow meta.block meta.objectliteral punctuation.definition.block",
        "source.jsx meta.arrow meta.block meta.arrow meta.block meta.arrow meta.block meta.objectliteral punctuation.definition.block",
        "meta.embedded.block.javascript meta.arrow meta.block meta.arrow meta.block meta.arrow meta.block meta.objectliteral punctuation.definition.block"
        // check up to 3 times the "meta.arrow meta.block" wrap.
      ],
      "settings": {
        "foreground": "#A9A9A9"
      }
    },
    //
    // For arrow function. Fix the prev rule's function's "{ }" braces for the inner type annotation.
    {
      "scope": [
        // 1 wrap:
        "source.ts meta.arrow meta.block meta.type.annotation punctuation.definition.block",
        "source.tsx meta.arrow meta.block meta.type.annotation punctuation.definition.block",
        "source.js meta.arrow meta.block meta.type.annotation punctuation.definition.block",
        "source.jsx meta.arrow meta.block meta.type.annotation punctuation.definition.block",
        "meta.embedded.block.javascript meta.arrow meta.block meta.type.annotation punctuation.definition.block",
        // 2 wrap:
        "source.ts meta.arrow meta.block meta.arrow meta.block meta.type.annotation punctuation.definition.block",
        "source.tsx meta.arrow meta.block meta.arrow meta.block meta.type.annotation punctuation.definition.block",
        "source.js meta.arrow meta.block meta.arrow meta.block meta.type.annotation punctuation.definition.block",
        "source.jsx meta.arrow meta.block meta.arrow meta.block meta.type.annotation punctuation.definition.block",
        "meta.embedded.block.javascript meta.arrow meta.block meta.arrow meta.block meta.type.annotation punctuation.definition.block",
        // 3 wrap:
        "source.ts meta.arrow meta.block meta.arrow meta.block meta.arrow meta.block meta.type.annotation punctuation.definition.block",
        "source.tsx meta.arrow meta.block meta.arrow meta.block meta.arrow meta.block meta.type.annotation punctuation.definition.block",
        "source.js meta.arrow meta.block meta.arrow meta.block meta.arrow meta.block meta.type.annotation punctuation.definition.block",
        "source.jsx meta.arrow meta.block meta.arrow meta.block meta.arrow meta.block meta.type.annotation punctuation.definition.block",
        "meta.embedded.block.javascript meta.arrow meta.block meta.arrow meta.block meta.arrow meta.block meta.type.annotation punctuation.definition.block"
        // check up to 3 times the "meta.arrow meta.block" wrap.
      ],
      "settings": {
        "foreground": "#A9A9A9"
      }
    },
    //
    //
    //
    //
    // "{ }" block for anonymous function.
    {
      "scope": [
        // 1 wrap:
        "source.ts meta.function.expression meta.block punctuation.definition.block",
        "source.tsx meta.function.expression meta.block punctuation.definition.block",
        "source.js meta.function.expression meta.block punctuation.definition.block",
        "source.jsx meta.function.expression meta.block punctuation.definition.block",
        "meta.embedded.block.javascript meta.function.expression meta.block punctuation.definition.block",
        // 2 wrap:
        "source.ts meta.function.expression meta.block meta.function.expression meta.block punctuation.definition.block",
        "source.tsx meta.function.expression meta.block meta.function.expression meta.block punctuation.definition.block",
        "source.js meta.function.expression meta.block meta.function.expression meta.block punctuation.definition.block",
        "source.jsx meta.function.expression meta.block meta.function.expression meta.block punctuation.definition.block",
        "meta.embedded.block.javascript meta.function.expression meta.block meta.function.expression meta.block punctuation.definition.block",
        // 3 wrap:
        "source.ts meta.function.expression meta.block meta.function.expression meta.block meta.function.expression meta.block punctuation.definition.block",
        "source.tsx meta.function.expression meta.block meta.function.expression meta.block meta.function.expression meta.block punctuation.definition.block",
        "source.js meta.function.expression meta.block meta.function.expression meta.block meta.function.expression meta.block punctuation.definition.block",
        "source.jsx meta.function.expression meta.block meta.function.expression meta.block meta.function.expression meta.block punctuation.definition.block",
        "meta.embedded.block.javascript meta.function.expression meta.block meta.function.expression meta.block meta.function.expression meta.block punctuation.definition.block",
        // 4 wrap:
        "source.ts meta.function.expression meta.block meta.function.expression meta.block meta.function.expression meta.block meta.function.expression meta.block punctuation.definition.block",
        "source.tsx meta.function.expression meta.block meta.function.expression meta.block meta.function.expression meta.block meta.function.expression meta.block punctuation.definition.block",
        "source.js meta.function.expression meta.block meta.function.expression meta.block meta.function.expression meta.block meta.function.expression meta.block punctuation.definition.block",
        "source.jsx meta.function.expression meta.block meta.function.expression meta.block meta.function.expression meta.block meta.function.expression meta.block punctuation.definition.block",
        "meta.embedded.block.javascript meta.function.expression meta.block meta.function.expression meta.block meta.function.expression meta.block meta.function.expression meta.block punctuation.definition.block"
      ],
      "settings": {
        "foreground": "#A9A9A9"
      }
    },
    //
    // For anonymous function. Fix the prev rule's function's { } braces for the inner blocks.
    {
      "scope": [
        // 1 wrap:
        "source.ts meta.function.expression meta.block meta.block punctuation.definition.block",
        "source.tsx meta.function.expression meta.block meta.block punctuation.definition.block",
        "source.js meta.function.expression meta.block meta.block punctuation.definition.block",
        "source.jsx meta.function.expression meta.block meta.block punctuation.definition.block",
        "meta.embedded.block.javascript meta.function.expression meta.block meta.block punctuation.definition.block",
        // 2 wrap:
        "source.ts meta.function.expression meta.block meta.function.expression meta.block meta.block punctuation.definition.block",
        "source.tsx meta.function.expression meta.block meta.function.expression meta.block meta.block punctuation.definition.block",
        "source.js meta.function.expression meta.block meta.function.expression meta.block meta.block punctuation.definition.block",
        "source.jsx meta.function.expression meta.block meta.function.expression meta.block meta.block punctuation.definition.block",
        "meta.embedded.block.javascript meta.function.expression meta.block meta.function.expression meta.block meta.block punctuation.definition.block",
        // 3 wrap:
        "source.ts meta.function.expression meta.block meta.function.expression meta.blockmeta.function.expression meta.block meta.block punctuation.definition.block",
        "source.tsx meta.function.expression meta.block meta.function.expression meta.blockmeta.function.expression meta.block meta.block punctuation.definition.block",
        "source.js meta.function.expression meta.block meta.function.expression meta.blockmeta.function.expression meta.block meta.block punctuation.definition.block",
        "source.jsx meta.function.expression meta.block meta.function.expression meta.blockmeta.function.expression meta.block meta.block punctuation.definition.block",
        "meta.embedded.block.javascript meta.function.expression meta.block meta.function.expression meta.blockmeta.function.expression meta.block meta.block punctuation.definition.block",
        // check up to 3 times the "meta.function.expression meta.block" wrap.
      ],
      "settings": {
        "foreground": "#A9A9A9"
      }
    },
    //
    // For anonymous function. Fix the prev rule's function's { } braces for the inner blocks.
    {
      "scope": [
        // 1 wrap:
        "source.ts meta.function.expression meta.block switch-statement punctuation.definition.block",
        "source.tsx meta.function.expression meta.block switch-statement punctuation.definition.block",
        "source.js meta.function.expression meta.block switch-statement punctuation.definition.block",
        "source.jsx meta.function.expression meta.block switch-statement punctuation.definition.block",
        "meta.embedded.block.javascript meta.function.expression meta.block switch-statement punctuation.definition.block",
        // 2 wrap:
        "source.ts meta.function.expression meta.block meta.function.expression meta.block switch-statement punctuation.definition.block",
        "source.tsx meta.function.expression meta.block meta.function.expression meta.block switch-statement punctuation.definition.block",
        "source.js meta.function.expression meta.block meta.function.expression meta.block switch-statement punctuation.definition.block",
        "source.jsx meta.function.expression meta.block meta.function.expression meta.block switch-statement punctuation.definition.block",
        "meta.embedded.block.javascript meta.function.expression meta.block meta.function.expression meta.block switch-statement punctuation.definition.block",
        // 3 wrap:
        "source.ts meta.function.expression meta.block meta.function.expression meta.block meta.function.expression meta.block switch-statement punctuation.definition.block",
        "source.tsx meta.function.expression meta.block meta.function.expression meta.block meta.function.expression meta.block switch-statement punctuation.definition.block",
        "source.js meta.function.expression meta.block meta.function.expression meta.block meta.function.expression meta.block switch-statement punctuation.definition.block",
        "source.jsx meta.function.expression meta.block meta.function.expression meta.block meta.function.expression meta.block switch-statement punctuation.definition.block",
        "meta.embedded.block.javascript meta.function.expression meta.block meta.function.expression meta.block meta.function.expression meta.block switch-statement punctuation.definition.block",
        // check up to 3 times the "meta.function.expression meta.block" wrap.
      ],
      "settings": {
        "foreground": "#A9A9A9"
      }
    },
    //
    // For anonymous function. Fix the prev rule's function's { } braces for the inner object.
    {
      "scope": [
        // 1 wrap:
        "source.ts meta.function.expression meta.block meta.objectliteral punctuation.definition.block",
        "source.tsx meta.function.expression meta.block meta.objectliteral punctuation.definition.block",
        "source.js meta.function.expression meta.block meta.objectliteral punctuation.definition.block",
        "source.jsx meta.function.expression meta.block meta.objectliteral punctuation.definition.block",
        "meta.embedded.block.javascript meta.function.expression meta.block meta.objectliteral punctuation.definition.block",
        // 2 wrap:
        "source.ts meta.function.expression meta.block meta.function.expression meta.block meta.objectliteral punctuation.definition.block",
        "source.tsx meta.function.expression meta.block meta.function.expression meta.block meta.objectliteral punctuation.definition.block",
        "source.js meta.function.expression meta.block meta.function.expression meta.block meta.objectliteral punctuation.definition.block",
        "source.jsx meta.function.expression meta.block meta.function.expression meta.block meta.objectliteral punctuation.definition.block",
        "meta.embedded.block.javascript meta.function.expression meta.block meta.function.expression meta.block meta.objectliteral punctuation.definition.block",
        // 3 wrap:
        "source.ts meta.function.expression meta.block meta.function.expression meta.block meta.function.expression meta.block meta.objectliteral punctuation.definition.block",
        "source.tsx meta.function.expression meta.block meta.function.expression meta.block meta.function.expression meta.block meta.objectliteral punctuation.definition.block",
        "source.js meta.function.expression meta.block meta.function.expression meta.block meta.function.expression meta.block meta.objectliteral punctuation.definition.block",
        "source.jsx meta.function.expression meta.block meta.function.expression meta.block meta.function.expression meta.block meta.objectliteral punctuation.definition.block",
        "meta.embedded.block.javascript meta.function.expression meta.block meta.function.expression meta.block meta.function.expression meta.block meta.objectliteral punctuation.definition.block"
        // check up to 3 times the "meta.function.expression meta.block" wrap.
      ],
      "settings": {
        "foreground": "#A9A9A9"
      }
    },
    //
    // For anonymous function. Fix the prev rule's function's { } braces for the inner type annotation.
    {
      "scope": [
        // 1 wrap:
        "source.ts meta.function.expression meta.block meta.type.annotation punctuation.definition.block",
        "source.tsx meta.function.expression meta.block meta.type.annotation punctuation.definition.block",
        "source.js meta.function.expression meta.block meta.type.annotation punctuation.definition.block",
        "source.jsx meta.function.expression meta.block meta.type.annotation punctuation.definition.block",
        "meta.embedded.block.javascript meta.function.expression meta.block meta.type.annotation punctuation.definition.block",
        // 2 wrap:
        "source.ts meta.function.expression meta.block meta.function.expression meta.block meta.type.annotation punctuation.definition.block",
        "source.tsx meta.function.expression meta.block meta.function.expression meta.block meta.type.annotation punctuation.definition.block",
        "source.js meta.function.expression meta.block meta.function.expression meta.block meta.type.annotation punctuation.definition.block",
        "source.jsx meta.function.expression meta.block meta.function.expression meta.block meta.type.annotation punctuation.definition.block",
        "meta.embedded.block.javascript meta.function.expression meta.block meta.function.expression meta.block meta.type.annotation punctuation.definition.block",
        // 3 wrap:
        "source.ts meta.function.expression meta.block meta.function.expression meta.block meta.function.expression meta.block meta.type.annotation punctuation.definition.block",
        "source.tsx meta.function.expression meta.block meta.function.expression meta.block meta.function.expression meta.block meta.type.annotation punctuation.definition.block",
        "source.js meta.function.expression meta.block meta.function.expression meta.block meta.function.expression meta.block meta.type.annotation punctuation.definition.block",
        "source.jsx meta.function.expression meta.block meta.function.expression meta.block meta.function.expression meta.block meta.type.annotation punctuation.definition.block",
        "meta.embedded.block.javascript meta.function.expression meta.block meta.function.expression meta.block meta.function.expression meta.block meta.type.annotation punctuation.definition.block"
        // check up to 3 times the "meta.function.expression meta.block" wrap.
      ],
      "settings": {
        "foreground": "#A9A9A9"
      }
    },
    //
    //
    //
    // "." accessor:
    {
      "scope": [
        "source.ts punctuation.accessor",
        "source.js punctuation.accessor",
        "source.tsx punctuation.accessor",
        "source.jsx punctuation.accessor",
        "meta.embedded.block.javascript punctuation.accessor"
      ],
      "settings": {
        "foreground": "#A9A9A9"
      }
    },
    //
    // "." accessor in type annotation:
    {
      "scope": [
        // "meta.type.annotation":
        "source.ts meta.type.annotation punctuation.accessor",
        "source.js meta.type.annotation punctuation.accessor",
        "source.tsx meta.type.annotation punctuation.accessor",
        "source.jsx meta.type.annotation punctuation.accessor",
        "meta.embedded.block.javascript meta.type.annotation punctuation.accessor",
        // "meta.return.type":
        "source.ts meta.return.type punctuation.accessor",
        "source.js meta.return.type punctuation.accessor",
        "source.tsx meta.return.type punctuation.accessor",
        "source.jsx meta.return.type punctuation.accessor",
        "meta.embedded.block.javascript meta.return.type punctuation.accessor",
      ],
      "settings": {
        "foreground": "#A9A9A9"
      }
    },
    //
    // . dot in ".then, .catch" (it doesn't work exactly, other dots also colored) :
    {
      "scope": [
        "source.ts meta.function meta.block meta.function-call punctuation.accessor", // . dot in ".then, .catch"
        "source.js meta.function meta.block meta.function-call punctuation.accessor", // . dot in ".then, .catch"
        "source.tsx meta.function meta.block meta.function-call punctuation.accessor", // . dot in ".then, .catch"
        "source.jsx meta.function meta.block meta.function-call punctuation.accessor", // . dot in ".then, .catch"
        "meta.embedded.block.javascript meta.function meta.block meta.function-call punctuation.accessor", // . dot in ".then, .catch"
      ],
      "settings": {
        "foreground": "#A9A9A9"
      }
    },
    //
    // "[ ]" square braces:
    {
      "scope": [
        "source.ts meta.array.literal meta.brace.square",
        "source.js meta.array.literal meta.brace.square",
        "source.tsx meta.array.literal meta.brace.square",
        "source.jsx meta.array.literal meta.brace.square",
        "meta.embedded.block.javascript meta.array.literal meta.brace.square",
        "source.ts punctuation.definition.binding-pattern.array",
        "source.js punctuation.definition.binding-pattern.array",
        "source.tsx punctuation.definition.binding-pattern.array",
        "source.jsx punctuation.definition.binding-pattern.array",
        "meta.embedded.block.javascript punctuation.definition.binding-pattern.array",
      ],
      "settings": {
        "foreground": "#A9A9A9"
      }
    },
    //
    // "< >" angle brackets for casting in TypeScript:
    {
      "scope": [
        "cast.expr.ts meta.brace.angle.ts",
      ],
      "settings": {
        "foreground": "#A9A9A9"
      }
    },
    //
    // "` `" backticks in template string:
    {
      "scope": [
        "source.ts punctuation.definition.string.template string.template", // ` `
        "source.js punctuation.definition.string.template string.template", // ` `
        "source.tsx punctuation.definition.string.template string.template", // ` `
        "source.jsx punctuation.definition.string.template string.template", // ` `
        "meta.embedded.block.javascript punctuation.definition.string.template string.template", // ` `
      ],
      "settings": {
        "foreground": "#0BC5E3",
        "fontStyle": "bold"
      }
    },
    //
    // comparison operators:
    {
      "scope": [
        "source.ts keyword.operator.comparison",
        "source.js keyword.operator.comparison",
        "source.tsx keyword.operator.comparison",
        "source.jsx keyword.operator.comparison",
        "meta.embedded.block.javascript keyword.operator.comparison",
        "source.ts keyword.operator.relational",
        "source.js keyword.operator.relational",
        "source.tsx keyword.operator.relational",
        "source.jsx keyword.operator.relational",
        "meta.embedded.block.javascript keyword.operator.comparison",
      ],
      "settings": {
        "foreground": "#A9A9A9"
      }
    },
    //
    // logical operators "&&", "||", "??":
    {
      "scope": [
        "source.ts keyword.operator.logical",
        "source.js keyword.operator.logical",
        "source.tsx keyword.operator.logical",
        "source.jsx keyword.operator.logical",
        "meta.embedded.block.javascript keyword.operator.logical",
      ],
      "settings": {
        "foreground": "#A9A9A9"
      }
    },
    //
    // "{ }" embedded children in TSX:
    {
      "scope": [
        "source.ts meta.jsx.children punctuation.section.embedded",
        "source.js meta.jsx.children punctuation.section.embedded",
        "source.tsx meta.jsx.children punctuation.section.embedded",
        "source.jsx meta.jsx.children punctuation.section.embedded",
        "meta.embedded.block.javascript meta.jsx.children punctuation.section.embedded",
      ],
      "settings": {
        "foreground": "#0BC5E3",
      }
    },
    //
    // a hack for the previous rule "meta.jsx.children punctuation.section.embedded":
    {
      "scope": [
        "source.ts meta.jsx.children meta.tag.attributes punctuation.section.embedded",
        "source.js meta.jsx.children meta.tag.attributes punctuation.section.embedded",
        "source.tsx meta.jsx.children meta.tag.attributes punctuation.section.embedded",
        "source.jsx meta.jsx.children meta.tag.attributes punctuation.section.embedded",
        "meta.embedded.block.javascript meta.jsx.children meta.tag.attributes punctuation.section.embedded",
      ],
      "settings": {
        "foreground": "#A9A9A9"
      }
    },
    //
    //
    //
    // React:
    //
    // tag's attribute names:
    {
      "scope": [
        "source.ts entity.other.attribute-name",
        "source.js entity.other.attribute-name",
        "source.tsx entity.other.attribute-name",
        "source.jsx entity.other.attribute-name",
      ],
      "settings": {
        "foreground": "#C344AB"
      }
    },
    //
    // Text:
    {
      "scope": [
        "source.ts meta.jsx.children",
        "source.js meta.jsx.children",
        "source.tsx meta.jsx.children",
        "source.jsx meta.jsx.children",
      ],
      "settings": {
        "foreground": "#FFA500"
      }
    },
    //
    // Not really React...
    // Text in a template string:
    {
      "scope": [
        "string.template.ts",
        "string.template.js",
        "string.template.tsx",
        "string.template.jsx",
      ],
      "settings": {
        "foreground": "#A31515"
      }
    },
    //
    //
    //
    // Documentation:
    {
      "scope": [
        // "comment.block.documentation ...":
        // "... storage.type":
        "source.ts comment.block.documentation storage.type",
        "source.js comment.block.documentation storage.type",
        "source.tsx comment.block.documentation storage.type",
        "source.jsx comment.block.documentation storage.type",
        "meta.embedded.block.javascript comment.block.documentation storage.type",
        // "... punctuation":
        "source.ts comment.block.documentation punctuation",
        "source.js comment.block.documentation punctuation",
        "source.tsx comment.block.documentation punctuation",
        "source.jsx comment.block.documentation punctuation",
        "meta.embedded.block.javascript comment.block.documentation punctuation",
        // "... punctuation.definition.block":
        "source.ts comment.block.documentation punctuation.definition.block",
        "source.js comment.block.documentation punctuation.definition.block",
        "source.tsx comment.block.documentation punctuation.definition.block",
        "source.jsx comment.block.documentation punctuation.definition.block",
        "meta.embedded.block.javascript comment.block.documentation punctuation.definition.block",
        // "... entity.name.type":
        "source.ts comment.block.documentation entity.name.type",
        "source.js comment.block.documentation entity.name.type",
        "source.tsx comment.block.documentation entity.name.type",
        "source.jsx comment.block.documentation entity.name.type",
        "meta.embedded.block.javascript comment.block.documentation entity.name.type",
        // "... variable":
        "source.ts comment.block.documentation variable",
        "source.js comment.block.documentation variable",
        "source.tsx comment.block.documentation variable",
        "source.jsx comment.block.documentation variable",
        "meta.embedded.block.javascript comment.block.documentation variable",
        // "comment.line ...":
        // "... entity.name.tag":
        "source.ts comment.line entity.name.tag",
        "source.js comment.line entity.name.tag",
        "source.tsx comment.line entity.name.tag",
        "source.jsx comment.line entity.name.tag",
        "meta.embedded.block.javascript comment.line entity.name.tag",
        // "... punctuation.definition.tag":
        "source.ts comment.line punctuation.definition.tag",
        "source.js comment.line punctuation.definition.tag",
        "source.tsx comment.line punctuation.definition.tag",
        "source.jsx comment.line punctuation.definition.tag",
        "meta.embedded.block.javascript comment.line punctuation.definition.tag",
        // "... entity.other.attribute-name":
        "source.ts comment.line entity.other.attribute-name",
        "source.js comment.line entity.other.attribute-name",
        "source.tsx comment.line entity.other.attribute-name",
        "source.jsx comment.line entity.other.attribute-name",
        "meta.embedded.block.javascript comment.line entity.other.attribute-name",
        // "... string":
        "source.ts comment.line string",
        "source.js comment.line string",
        "source.tsx comment.line string",
        "source.jsx comment.line string",
        "meta.embedded.block.javascript comment.line string",
        // "... punctuation.definition.string":
        "source.ts comment.line punctuation.definition.string",
        "source.js comment.line punctuation.definition.string",
        "source.tsx comment.line punctuation.definition.string",
        "source.jsx comment.line punctuation.definition.string",
        "meta.embedded.block.javascript comment.line punctuation.definition.string",
        // "... keyword.operator.assignment":
        "source.ts comment.line keyword.operator.assignment",
        "source.js comment.line keyword.operator.assignment",
        "source.tsx comment.line keyword.operator.assignment",
        "source.jsx comment.line keyword.operator.assignment",
        "meta.embedded.block.javascript comment.line keyword.operator.assignment",
      ],
      "settings": {
        "foreground": "#50A750"
      }
    },
    //
    //
    //
    // Misc in TypeScript:
    //
    // For the syntax like:
    // const Button = styled.button<{ $primary?: boolean; }>`
    {
      "scope": [
        "source.ts meta.objectliteral",
        "source.js meta.objectliteral",
        "source.tsx meta.objectliteral",
        "source.jsx meta.objectliteral",
        "meta.embedded.block.javascript meta.objectliteral",
      ],
      "settings": {
        "foreground": "#000000"
      }
    },
    //
    //
    //
    // ====================================================
    // Svelte (.svelte):
    //
    // Keywords in Svelte:
    //
    // control keywords:
    {
      "scope": [
        "keyword.control.svelte",
        "meta.special.each.svelte keyword.control.as.svelte", // "as" in "{:each items as item}" block
      ],
      "settings": {
        "foreground": "#0BC5E3",
      }
    },
    //
    // "class:playing", "bind:value", "transition:fly" and similar attributes:
    {
      "scope": [
        // "class" directives:
        "meta.directive.class.svelte entity.other.attribute-name.svelte",
        "meta.directive.class.svelte entity.other.attribute-name.class.svelte",
        // "bind" directives
        "meta.directive.bind.svelte keyword.control.svelte", // "bind" in "bind:value"
        "meta.directive.bind.svelte entity.name.type.svelte", // "value" in "bind:value"
        "meta.directive.bind.svelte variable.language.svelte", // "this" in "bind:this"
        // transition and animation directives:
        "keyword.other.animation.svelte", // "transition" in "transition:fly"
        "meta.directive.transition.svelte entity.name.type.svelte", // "fly" in "transition:fly"
        "meta.directive.in.svelte variable.function.svelte", // "fly" in "in:fly"
        "meta.directive.out.svelte variable.function.svelte", // "fly" in "out:fly"
        "meta.directive.animate.svelte variable.function.svelte", // "fly" in "animate:fly",
        // "let" directive:
        "meta.directive.let.svelte storage.type.svelte", // "let" in "let:prop",
        "meta.directive.let.svelte variable.parameter.svelte", // "prop" in "let:prop",
      ],
      "settings": {
        "foreground": "#C344AB",
      }
    },
    //
    // "style:transform" and similar CSS properties in attributes:
    {
      "scope": [
        "meta.directive.style.svelte support.type.property-name.svelte", // "transform" and similar
      ],
      "settings": {
        "foreground": "#A9A9A9",
      }
    },
    //
    // "--color" and similar custom CSS variables in attributes:
    {
      "scope": [
        "meta.tag.start.svelte meta.attribute support.type.property-name.svelte", // "--color" and similar
      ],
      "settings": {
        "foreground": "#A9A9A9",
      }
    },
    //
    // "on.click", "on:keydown" and similar attributes:
    {
      "scope": [
        "meta.directive.on.svelte keyword.control.svelte", // "on" in "on:keydown"
        "meta.directive.on.svelte entity.name.type.svelte", // "keydown" in "on:keydown"
        "support.function.svelte", // "preventDefault", "once"
      ],
      "settings": {
        "foreground": "#C344AB",
      }
    },
    //
    // "slot" syntax:
    {
      "scope": [
        "meta.scope.tag.slot.svelte keyword.control.svelte", // "<slot />" tag
        "meta.attribute.slot.svelte entity.other.attribute-name.svelte", // "slot"=name attribute in children tags
      ],
      "settings": {
        "foreground": "#0BC5E3",
      }
    },
    //
    // "slot" syntax:
    {
      "scope": [
        "meta.attribute.slot.svelte string.quoted.svelte", // slot="name" attribute in children tags
        "meta.scope.tag.slot.svelte meta.attribute.name.svelte string.quoted.svelte", // name="slot_name" attribute in slot tag
      ],
      "settings": {
        "foreground": "#E8810C",
      }
    },
    //
    // "slot" syntax:
    {
      "scope": [
        "meta.scope.tag.slot.svelte meta.attribute.name.svelte entity.other.attribute-name.svelte", // "name" attribute of "<slot />" tag
      ],
      "settings": {}
    },
    //
    // "svelte" tag keyword:
    {
      "scope": [
        "meta.tag.start.svelte keyword.control.svelte", // "svelte" in "svelte:head"
        "meta.tag.end.svelte keyword.control.svelte", // "svelte" in "svelte:head"
      ],
      "settings": {
        "foreground": "#0000CC",
      }
    },
    //
    // <script> and <style> tags in svelte components:
    {
      "scope": [
        "meta.script.svelte entity.name.tag.svelte", // <script> tag
        "meta.script.svelte punctuation.definition.tag.begin.svelte", // <script> tag
        "meta.script.svelte punctuation.definition.tag.end.svelte", // <script> tag
        "meta.style.svelte entity.name.tag.svelte", // <style> tag
        "meta.style.svelte punctuation.definition.tag.begin.svelte", // <style> tag
        "meta.style.svelte punctuation.definition.tag.end.svelte", // <style> tag
      ],
      "settings": {
        "foreground": "#8080E6" // #0000CC80
      }
    },
    //
    // <svelte:head>, <svelte:body>, <svelte:document> and similar tags in svelte components:
    {
      "scope": [
        // <svelte:head>:
        "meta.scope.tag.svelte:head.svelte meta.tag keyword.control.svelte", // "svelte"
        "meta.scope.tag.svelte:head.svelte meta.tag punctuation.definition.tag.begin.svelte", // "<"
        "meta.scope.tag.svelte:head.svelte meta.tag punctuation.definition.tag.end.svelte", // ">"
        "meta.scope.tag.svelte:head.svelte meta.tag entity.name.tag.svelte", // "head"
        // <svelte:body>:
        "meta.scope.tag.svelte:body.svelte meta.tag keyword.control.svelte", // "svelte"
        "meta.scope.tag.svelte:body.svelte meta.tag punctuation.definition.tag.begin.svelte", // "<"
        "meta.scope.tag.svelte:body.svelte meta.tag punctuation.definition.tag.end.svelte", // ">"
        "meta.scope.tag.svelte:body.svelte meta.tag entity.name.tag.svelte", // "body"
        // <svelte:document>:
        "meta.scope.tag.svelte:document.svelte meta.tag keyword.control.svelte", // "svelte"
        "meta.scope.tag.svelte:document.svelte meta.tag punctuation.definition.tag.begin.svelte", // "<"
        "meta.scope.tag.svelte:document.svelte meta.tag punctuation.definition.tag.end.svelte", // ">"
        "meta.scope.tag.svelte:document.svelte meta.tag entity.name.tag.svelte", // "document"
        // <svelte:window>:
        "meta.scope.tag.svelte:window.svelte meta.tag keyword.control.svelte", // "svelte"
        "meta.scope.tag.svelte:window.svelte meta.tag punctuation.definition.tag.begin.svelte", // "<"
        "meta.scope.tag.svelte:window.svelte meta.tag punctuation.definition.tag.end.svelte", // ">"
        "meta.scope.tag.svelte:window.svelte meta.tag entity.name.tag.svelte", // "window"
        // <svelte:options>:
        "meta.scope.tag.svelte:options.svelte meta.tag keyword.control.svelte", // "svelte"
        "meta.scope.tag.svelte:options.svelte meta.tag punctuation.definition.tag.begin.svelte", // "<"
        "meta.scope.tag.svelte:options.svelte meta.tag punctuation.definition.tag.end.svelte", // ">"
        "meta.scope.tag.svelte:options.svelte meta.tag entity.name.tag.svelte", // "options"
      ],
      "settings": {
        "foreground": "#8080E6" // #0000CC80
      }
    },
    //
    // fix the directives like "on:" after the previous rule applied:
    {
      "scope": [
        // <svelte:head>:
        "meta.scope.tag.svelte:head.svelte meta.tag meta.directive keyword.control.svelte",
        // <svelte:body>:
        "meta.scope.tag.svelte:body.svelte meta.tag meta.directive keyword.control.svelte",
        // <svelte:document>:
        "meta.scope.tag.svelte:document.svelte meta.tag meta.directive keyword.control.svelte",
        // <svelte:window>:
        "meta.scope.tag.svelte:window.svelte meta.tag meta.directive keyword.control.svelte",
        // <svelte:options>:
        "meta.scope.tag.svelte:options.svelte meta.tag meta.directive keyword.control.svelte",
      ],
      "settings": {
        "foreground": "#C344AB"
      }
    },
    //
    // "export" keyword for props:
    {
      "scope": [
        "meta.embedded.block.svelte keyword.control.export"
      ],
      "settings": {
        "foreground": "#C344AB",
      }
    },
    //
    // "#if", ":else" blocks:
    {
      "scope": [
        "keyword.control.conditional.svelte", // "if", "else"
      ],
      "settings": {
        "foreground": "#0BC5E3",
      }
    },
    //
    // "( )" key notation in #each blocks:
    {
      "scope": [
        "meta.special.each.svelte meta.special.start.svelte meta.brace.round.svelte",
      ],
      "settings": {
        "foreground": "#C344AB",
      }
    },
    //
    // "@debug" keyword:
    {
      "scope": [
        "keyword.other.debugger.svelte", // "debug"
        "meta.special.debug.svelte punctuation.definition.keyword", // "@"
      ],
      "settings": {
        "foreground": "#C344AB",
      }
    },
    //
    // "@component" documentation keyword:
    {
      "scope": [
        "keyword.declaration.class.component.svelte", // "component"
        "comment.block.svelte punctuation.definition.keyword.svelte", // "@"
      ],
      "settings": {
        "foreground": "#C344AB",
      }
    },
    //
    // "use:enhance" and similar:
    {
      "scope": [
        "meta.directive.use.svelte keyword.control.svelte", // "enhance" in "use:enhance"
        "meta.directive.use.svelte variable.function.svelte", // "enhance" in "use:enhance"
      ],
      "settings": {
        "foreground": "#C344AB"
      }
    },
    //
    // "@const":
    {
      "scope": [
        "meta.special.const.svelte storage.type.svelte",
      ],
      "settings": {
        "foreground": "#A9A9A9"
      }
    },
    //
    // "@html":
    {
      "scope": [
        "meta.special.html.svelte punctuation.definition.keyword.svelte",
        "meta.special.html.svelte keyword.other.svelte",
      ],
      "settings": {
        "foreground": "#C344AB"
      }
    },
    //
    // Punctuation in Svelte:
    //
    // "{ }" string interpolation:
    {
      "scope": [
        "source.svelte punctuation.section.embedded.begin.svelte",
        "source.svelte punctuation.section.embedded.end.svelte",
        "source.svelte string.quoted.svelte punctuation.section.embedded.begin.svelte",
        "source.svelte string.quoted.svelte punctuation.section.embedded.end.svelte",
        // For embedded code, like in Markdown:
        "punctuation.section.embedded.begin.svelte",
        "punctuation.section.embedded.end.svelte",
        "string.quoted.svelte punctuation.section.embedded.begin.svelte",
        "string.quoted.svelte punctuation.section.embedded.end.svelte",
        "meta.embedded.block.svelte meta string.quoted.svelte punctuation.section.embedded.begin.svelte",
        "meta.embedded.block.svelte meta string.quoted.svelte punctuation.section.embedded.end.svelte"
      ],
      "settings": {
        "foreground": "#0BC5E3",
      }
    },
    //
    // fix "{ }" string interpolation for normal brackets:
    {
      "scope": [
        "source.svelte meta punctuation.section.embedded.begin.svelte",
        "source.svelte meta punctuation.section.embedded.end.svelte",
        "meta.embedded.block.svelte meta punctuation.section.embedded.begin.svelte",
        "meta.embedded.block.svelte meta punctuation.section.embedded.end.svelte"
      ],
      "settings": {
        "foreground": "#A9A9A9",
      }
    },
    //
    // "$:" reactive declarations:
    {
      "scope": [
        "meta.embedded.block.svelte entity.name.label", // "&"
        "meta.embedded.block.svelte punctuation.separator.label", // ":"
      ],
      "settings": {
        "foreground": "#C344AB",
      }
    },
    //
    // "$" in store syntax:
    {
      "scope": [
        "punctuation.definition.variable.svelte", // "$" in "$page"
      ],
      "settings": {
        "foreground": "#C344AB",
      }
    },
    //
    // "<", ">" tag brackets:
    {
      "scope": [
        "punctuation.definition.tag.begin.svelte",
        "punctuation.definition.tag.end.svelte",
      ],
      "settings": {
        "foreground": "#0000CC",
      }
    },
    //
    //
    //
    // ====================================================
    // Vue (.vue):
    //
    // fix the HTML tag end:
    {
      "scope": [
        "text.html.vue meta.tag.other" // />
      ],
      "settings": {
        "foreground": "#0000CC"
      }
    },
    //
    // fix the assignment sign:
    {
      "scope": [
        "text.html.vue meta.tag.block.any" //
      ],
      "settings": {
        "foreground": "#000000"
      }
    },
    //
    // fix the generic template {{ }}:
    {
      "scope": [
        "text.html.vue punctuation.definition.generic.begin", // {{
        "text.html.vue punctuation.definition.generic.end" // }}
      ],
      "settings": {
        "foreground": "#F066FF"
      }
    },
    //
    //
    //
    // ====================================================
    // C# (.cs):
    //
    // Names in C#:
    //
    // namespace names:
    {
      "scope": [
        "source.cs entity.name.type.namespace",
        "text.aspnetcorerazor entity.name.type.namespace",
        "text.aspnetcorerazor meta.directive", // "." accessors in namespace names in Razor Pages.
      ],
      "settings": {
        "foreground": "#000000"
      }
    },
    //
    // namespace alias names:
    {
      "scope": [
        "source.cs entity.name.type.alias",
        "text.aspnetcorerazor entity.name.type.alias",
      ],
      "settings": {
        "foreground": "#8080E6" // #0000CC80
      }
    },
    //
    // type names in definition:
    {
      "scope": [
        // "class":
        "source.cs entity.name.type.class",
        "text.aspnetcorerazor entity.name.type.class",
        // "struct":
        "source.cs entity.name.type.struct",
        "text.aspnetcorerazor entity.name.type.struct",
        // "record":
        "source.cs entity.name.type.record",
        "text.aspnetcorerazor entity.name.type.record",
        // "interface":
        "source.cs entity.name.type.interface",
        "text.aspnetcorerazor entity.name.type.interface",
        // "enum":
        "source.cs entity.name.type.enum",
        "text.aspnetcorerazor entity.name.type.enum",
        // "delegate":
        "source.cs entity.name.type.delegate",
        "text.aspnetcorerazor entity.name.type.delegate",
      ],
      "settings": {
        "foreground": "#0000CC",
        "fontStyle": "bold"
      }
    },
    //
    // type parameters:
    {
      "scope": [
        "source.cs entity.name.type", // class, interface names when creating a class; class instance
        "text.aspnetcorerazor entity.name.type", // type parameters
        "source.cs storage.type", // type parameters
        "text.aspnetcorerazor storage.type", // type parameters
        "source.cs keyword.type", // "void, int, string" keywords
        "text.aspnetcorerazor keyword.type", // "void, int, string" keywords
      ],
      "settings": {
        "foreground": "#E8810C"
      }
    },
    //
    // function name in definition:
    {
      "scope": [
        "source.cs meta.definition.method entity.name.function",
        "text.aspnetcorerazor meta.definition.method entity.name.function",
        "source.cs entity.name.function",
        "text.aspnetcorerazor entity.name.function",
      ],
      "settings": {
        "foreground": "#0000CC"
      }
    },
    //
    // function name in function call:
    {
      "scope": [
        "source.cs meta.function-call entity.name.function",
        "text.aspnetcorerazor meta.function-call entity.name.function",
      ],
      "settings": {
        "foreground": "#0000CC"
      }
    },
    //
    // function named parameter in function call in Razor Pages:
    {
      "scope": [
        "text.aspnetcorerazor entity.name.label"
      ],
      "settings": {
        "foreground": "#0000CC"
      }
    },
    //
    // local variable name definition:
    {
      "scope": [
        "source.cs entity.name.variable.local", // local variable name definition
        "text.aspnetcorerazor entity.name.variable.local", // local variable name definition
      ],
      "settings": {
        "foreground": "#000000"
      }
    },
    //
    // property and field names definitions in a class:
    {
      "scope": [
        "source.cs entity.name.variable.property",
        "source.cs entity.name.variable.field",
      ],
      "settings": {
        "foreground": "#0000CC"
      }
    },
    //
    // object name during injection in Razor Pages:
    {
      "scope": [
        "text.aspnetcorerazor entity.name.variable.property", // property names
        "text.aspnetcorerazor entity.name.variable.field", // field names
      ],
      "settings": {
        "foreground": "#000000"
      }
    },
    //
    // method's parameter names, named parameters:
    {
      "scope": [
        "source.cs entity.name.variable.parameter",
        "text.aspnetcorerazor entity.name.variable.parameter",
      ],
      "settings": {
        "foreground": "#C344AB",
      }
    },
    //
    // null - literal values :
    {
      "scope": [
        "source.cs constant.language", // null
        "text.aspnetcorerazor constant.language", // null
      ],
      "settings": {
        "foreground": "#A31515"
      }
    },
    //
    // object key names:
    {
      "scope": [
        "variable.other.readwrite.cs",
      ],
      "settings": {
        "foreground": "#000000"
      }
    },
    //
    // label name:
    {
      "scope": [
        "entity.name.label.cs",
      ],
      "settings": {
        "foreground": "#C344AB"
      }
    },
    //
    //
    //
    // Keywords:
    //
    // "class", "record", "interface", "enum" keywords:
    {
      "scope": [
        "source.cs keyword.other.class",
        "storage.type.class.cs",
        "storage.type.record.cs",
        "source.cs keyword.other.interface",
        "storage.type.interface.cs",
        "source.cs keyword.other.struct",
        "storage.type.struct.cs",
        "source.cs keyword.other.enum",
        "storage.type.enum.cs",
        "storage.type.namespace.cs",
        "source.cs keyword.other.namespace",
      ],
      "settings": {
        "foreground": "#A31515"
      }
    },
    //
    // "base", "this" keywords:
    {
      "scope": [
        "source.cs keyword.other.base", // "base"
        "source.cs keyword.other.this", // "this"
        "source.cs variable.language.this", // "this" in constructor
      ],
      "settings": {
        "foreground": "#C344AB"
      }
    },
    //
    // "using", "global" keywords:
    {
      "scope": [
        "keyword.other.using.cs",
        "keyword.other.directive.using.cs",
        "keyword.other.global.cs",
        "keyword.other.directive.global.cs",
      ],
      "settings": {
        "foreground": "#A9A9A9"
      }
    },
    //
    // "private", "public", "static", "readonly", "override", "async" keywords:
    {
      "scope": [
        "source.cs storage.modifier",
      ],
      "settings": {
        "foreground": "#A31515"
      }
    },
    //
    // "this" keyword in extension methods:
    {
      "scope": [
        "storage.modifier.this.cs",
      ],
      "settings": {
        "foreground": "#0BC5E3"
      }
    },
    //
    // "get", "set", "init" keywords:
    {
      "scope": [
        "source.cs keyword.other.get",
        "storage.type.accessor.get.cs",
        "source.cs keyword.other.set",
        "storage.type.accessor.set.cs",
        "source.cs keyword.other.init",
        "storage.type.accessor.init.cs",
      ],
      "settings": {
        "foreground": "#C344AB"
      }
    },
    //
    // "var" keyword:
    {
      "scope": [
        "keyword.other.var.cs",
        "storage.type.var.cs",
      ],
      "settings": {
        "foreground": "#A9A9A9"
      }
    },
    //
    // "new" keyword:
    {
      "scope": [
        "keyword.other.new.cs",
        "keyword.operator.expression.new.cs",
      ],
      "settings": {
        "foreground": "#0000CC"
      }
    },
    //
    // "typeof", "nameof" keywords:
    {
      "scope": [
        "source.cs keyword.other.typeof", // "typeof"
        "keyword.operator.expression.typeof.cs", // "typeof"
        "source.cs keyword.other.nameof", // "nameof"
        "keyword.operator.expression.nameof.cs", // "nameof"
      ],
      "settings": {
        "foreground": "#0BC5E3"
      }
    },
    //
    // "is" keyword:
    {
      "scope": [
        "source.cs keyword.other.is",
        "keyword.operator.expression.pattern.is.cs",
      ],
      "settings": {
        "foreground": "#A9A9A9"
      }
    },
    //
    // "default" keyword:
    {
      "scope": [
        "source.cs keyword.other.default", // "default"
        "keyword.operator.expression.default.cs" // "default"
      ],
      "settings": {
        "foreground": "#C344AB"
      }
    },
    //
    // "await" keyword:
    {
      "scope": [
        "source.cs keyword.other.await", // await
        "keyword.operator.expression.await.cs", // await
      ],
      "settings": {
        "foreground": "#0BC5E3"
      }
    },
    //
    // "checked", "unchecked" keywords:
    {
      "scope": [
        "source.cs keyword.other.checked",
        "source.cs keyword.other.unchecked",
      ],
      "settings": {
        "foreground": "#0BC5E3"
      }
    },
    //
    // "continue", "break", "goto" keywords:
    {
      "scope": [
        "keyword.control.flow.continue.cs",
        "keyword.control.flow.break.cs",
        "keyword.control.goto.cs",
      ],
      "settings": {
        "foreground": "#0BC5E3"
      }
    },
    //
    // "return", "throw", "using" keywords:
    {
      "scope": [
        "keyword.control.flow.return.cs",
        "keyword.control.flow.throw.cs",
        "keyword.control.context.using.cs"
      ],
      "settings": {
        "foreground": "#0BC5E3"
      }
    },
    //
    // other keywords ... :
    {
      "scope": [
        "source.cs keyword.other", // other keywords ...
      ],
      "settings": {
        "foreground": "#A31515"
      }
    },
    //
    //
    //
    // Punctuation in C#:
    //
    // { } curly braces for methods:
    {
      "scope": [
        "source.cs punctuation.curlybrace", // { }
        "text.aspnetcorerazor punctuation.curlybrace", // { }
      ],
      "settings": {
        "foreground": "#A9A9A9"
      }
    },
    //
    // ( ) round braces:
    {
      "scope": [
        "source.cs punctuation.parenthesis", // ( )
        "text.aspnetcorerazor punctuation.parenthesis", // ( )
      ],
      "settings": {
        "foreground": "#A9A9A9"
      }
    },
    //
    // [ ] square brackets:
    {
      "scope": [
        "source.cs punctuation.squarebracket", // [ ]
        "text.aspnetcorerazor punctuation.squarebracket", // [ ]
      ],
      "settings": {
        "foreground": "#A9A9A9"
      }
    },
    //
    // dot ".":
    {
      "scope": [
        "source.cs punctuation.accessor" // "."
      ],
      "settings": {
        "foreground": "#A9A9A9"
      }
    },
    //
    // separator for binary and hex numbers "_":
    {
      "scope": [
        "source.cs constant.numeric.other.separator.thousands" // "_" in 0b_1000_0001
      ],
      "settings": {
        "foreground": "#A9A9A9"
      }
    },
    //
    // nullable type "?":
    {
      "scope": [
        "source.cs punctuation.separator.question-mark" // "?"
      ],
      "settings": {
        "foreground": "#A9A9A9"
      }
    },
    //
    // ternary operator "?", ":":
    {
      "scope": [
        "keyword.operator.conditional.question-mark.cs", // "?"
        "keyword.operator.conditional.colon.cs", // ":"
      ],
      "settings": {
        "foreground": "#0BC5E3",
        "fontStyle": "bold"
      }
    },
    //
    // null-coalescing operator "??":
    {
      "scope": [
        "keyword.operator.null-coalescing.cs", // null-coalescing operator "??"
      ],
      "settings": {
        "foreground": "#0BC5E3"
      }
    },
    //
    // null-conditional operator "?":
    {
      "scope": [
        "keyword.operator.null-conditional.cs" // null-conditional operator {variable_name}"?"
      ],
      "settings": {
        "foreground": "#A9A9A9"
      }
    },
    //
    // compound bitwise operators "<<=", "|=", ">>=":
    {
      "scope": [
        "source.cs keyword.operator.assignment.compound.bitwise"
      ],
      "settings": {
        "foreground": "#0BC5E3"
      }
    },
    //
    // logical operators "||", "&&", null-forgiving operator "!":
    {
      "scope": [
        "keyword.operator.logical.cs" // logical operators "||", "&&", null-forgiving operator {variable_name}"!"
      ],
      "settings": {
        "foreground": "#A9A9A9"
      }
    },
    //
    // "{ }" string interpolation:
    {
      "scope": [
        "source.cs punctuation.definition.interpolation.begin", // "{"
        "source.cs punctuation.definition.interpolation.end" // "}"
      ],
      "settings": {
        "foreground": "#0BC5E3"
      }
    },
    //
    // preprocessor directives "pragma warning disable ...":
    {
      "scope": [
        "source.cs meta.preprocessor",
        "source.cs meta.preprocessor keyword"
      ],
      "settings": {
        "foreground": "#A9A9A9"
      }
    },
    //
    //
    //
    // Documentation in C#:
    //
    // Documentation:
    {
      "scope": [
        "comment.block.documentation.cs entity.name.tag",
        "comment.block.documentation.cs punctuation",
        "comment.block.documentation.cs punctuation.separator",
        "comment.block.documentation.cs entity.other.attribute-name",
        "comment.block.documentation.cs string",
      ],
      "settings": {
        "foreground": "#50A750"
      }
    },
    //
    //
    //
    // Razor Pages:
    //
    // Directives like "@using", "@page", "@model":
    {
      "scope": [
        "text.aspnetcorerazor meta.directive keyword.other.using", // "using"
        "meta.directive keyword.other.using.cs", // "using"
        "text.aspnetcorerazor meta.directive keyword.control.razor.directive", // "page", "model"
        "text.aspnetcorerazor meta.directive keyword.control.cshtml.transition", // "@"
      ],
      "settings": {
        "foreground": "#A9A9A9"
      }
    },
    //
    // "@{ }" code block syntax in Razor Pages:
    {
      "scope": [
        "text.aspnetcorerazor meta.structure.razor.codeblock keyword.control.cshtml.transition", // "@"
        "text.aspnetcorerazor meta.structure.razor.codeblock keyword.control.razor.directive.codeblock.open", // "{"
        "text.aspnetcorerazor meta.structure.razor.codeblock keyword.control.razor.directive.codeblock.close", // "}"
      ],
      "settings": {
        "foreground": "#0BC5E3"
      }
    },
    //
    // "@if { }" blocks in Razor Pages:
    {
      "scope": [
        "text.aspnetcorerazor keyword.control.conditional", // "if", "else" in "@if { }" block
        "text.aspnetcorerazor keyword.control.cshtml.transition", // "@" in "@if { }" block
        "text.aspnetcorerazor keyword.control", // "foreach"
      ],
      "settings": {
        "foreground": "#0BC5E3"
      }
    },
    //
    // "@" in transitions to a C# code:
    {
      "scope": [
        "text.aspnetcorerazor meta.expression.implicit keyword.control.cshtml.transition", // "@"
      ],
      "settings": {
        "foreground": "#0BC5E3"
      }
    },
    //
    // All C# code after "@" implicit transition:
    {
      "scope": [
        "text.aspnetcorerazor meta.expression.implicit source.cs variable",
        "text.aspnetcorerazor meta.expression.implicit source.cs entity.name.function.cs",
      ],
      "settings": {
        "foreground": "#0BC5E3"
      }
    },
    //
    // "." dot in "@Model.RequestId" in Razor Pages:
    {
      "scope": [
        "text.aspnetcorerazor meta.expression.implicit source.cs",
        "text.aspnetcorerazor meta.structure.razor.codeblock meta.expression.implicit source.cs",
      ],
      "settings": {
        "foreground": "#A9A9A9"
      }
    },
    //
    // variable's property name in Razor Pages:
    {
      "scope": [
        "text.aspnetcorerazor meta.expression.implicit source.cs variable.other.object.property",
      ],
      "settings": {
        "foreground": "#000000"
      }
    },
    //
    // Text like "&copy;":
    {
      "scope": [
        "text.aspnetcorerazor constant.character.entity.named.copy punctuation",
      ],
      "settings": {
        "foreground": "#A9A9A9"
      }
    },
    //
    // "{ }" curly braces in if syntax "@if ( ) { }":
    {
      "scope": [
        "text.aspnetcorerazor meta.structure.razor.csharp.codeblock punctuation.curlybrace",
      ],
      "settings": {
        "foreground": "#0BC5E3"
      }
    },
    //
    // ":" and ";" in Razor Pages:
    {
      "scope": [
        "text.aspnetcorerazor punctuation.separator.colon",
        "text.aspnetcorerazor keyword.control.razor.optionalSemicolon",
      ],
      "settings": {
        "foreground": "#A9A9A9"
      }
    },
    //
    // text in Razor Pages:
    {
      "scope": [
        "text.aspnetcorerazor meta.structure.razor.codeblock source.cs",
      ],
      "settings": {
        "foreground": "#FFA500"
      }
    },
    //
    // ASP.NET Core specific attributes in Razor Pages:
    // {
    //   "scope": [
    //     "text.aspnetcorerazor meta.attribute.unrecognized entity.other.attribute-name",
    //   ],
    //   "settings": {
    //     "foreground": "#C344AB"
    //   }
    // },
    //
    // inline CSS in Razor Pages:
    {
      "scope": [
        "text.aspnetcorerazor string.quoted.double source.css", // Razor Pages
        "text.html.derivative string.quoted.double source.css", // Svelte
      ],
      "settings": {
        "foreground": "#A31515"
      }
    },
    //
    //
    //
    // ====================================================
    // Java (.java):
    //
    // "import", "package" keywords:
    {
      "scope": [
        "keyword.other.import.java", // "import"
        "keyword.other.package.java", // "package"
        "meta.import.java storage.modifier.java", // "static" in "import static"
      ],
      "settings": {
        "foreground": "#A9A9A9"
      }
    },
    //
    // "export" keyword:
    {
      "scope": [
        "source.java keyword.module",
      ],
      "settings": {
        "foreground": "#A31515"
      }
    },
    //
    // namespace name:
    {
      "scope": [
        "source.java storage.modifier.import",
        "source.java storage.modifier.package",
        "source.java storage.modifier.import variable.language.wildcard",
        "source.java entity.name.type.module",
      ],
      "settings": {
        "foreground": "#000000"
      }
    },
    //
    // type name in declaration:
    {
      "scope": [
        "source.java entity.name.type",
      ],
      "settings": {
        "foreground": "#0000CC",
        "fontStyle": "bold"
      }
    },
    //
    // type name during call:
    {
      "scope": [
        "source.java storage.type",
        "source.java entity.other.inherited-class",
      ],
      "settings": {
        "foreground": "#E8810C"
      }
    },
    //
    // function name in declaration:
    {
      "scope": [
        "meta.method.identifier entity.name.function.java", // method names
        "variable.other.definition.java", // field names
      ],
      "settings": {
        "foreground": "#0000CC"
      }
    },
    //
    // variable name in declaration:
    {
      "scope": [
        "meta.method.body.java variable.other.definition.java",
      ],
      "settings": {
        "foreground": "#000000"
      }
    },
    //
    // "@AllArgsConstructor" annotation syntax in Java:
    //
    // annotation name in annotation syntax:
    {
      "scope": [
        "storage.type.annotation.java",
      ],
      "settings": {
        "foreground": "#C344AB"
      }
    },
    //
    // "@" in annotation syntax:
    {
      "scope": [
        "punctuation.definition.annotation.java",
      ],
      "settings": {
        "foreground": "#C344AB"
      }
    },
    //
    // variable name:
    {
      "scope": [
        "source.java meta.method.body variable.other.definition",
      ],
      "settings": {
        "foreground": "#000000"
      }
    },
    //
    // constants:
    {
      "scope": [
        "source.java constant.language",
      ],
      "settings": {
        "foreground": "#A31515"
      }
    },
    //
    // enum members:
    {
      "scope": [
        "meta.enum.java constant.other.enum.java",
      ],
      "settings": {
        "foreground": "#C344AB"
      }
    },
    //
    // "this", "super" keywords:
    {
      "scope": [
        "source.java variable.language",
      ],
      "settings": {
        "foreground": "#C344AB"
      }
    },
    //
    // keywords like "public", "class", "package":
    {
      "scope": [
        "source.java storage.modifier",
        "source.java keyword.other.package",
      ],
      "settings": {
        "foreground": "#A31515"
      }
    },
    //
    // "instanceof" keyword:
    {
      "scope": [
        "source.java keyword.operator.instanceof", // "instanceof"
      ],
      "settings": {
        "foreground": "#0BC5E3"
      }
    },
    //
    // JavaDoc highlighting keywords:
    {
      "scope": [
        "source.java comment.block.javadoc keyword",
        "source.java comment.block.javadoc variable.parameter",
        "source.java comment.block.javadoc entity.name.type",
      ],
      "settings": {
        "foreground": "#50A750"
      }
    },
    //
    // ternary operator "?", ":" and double colon operator "::":
    {
      "scope": [
        "source.java keyword.control.ternary",
      ],
      "settings": {
        "foreground": "#0BC5E3",
        "fontStyle": "bold"
      }
    },
    //
    // brackets in an arrow function "()" ->:
    {
      "scope": [
        "source.java meta.method-call punctuation.bracket.round",
      ],
      "settings": {
        "foreground": "#0BC5E3",
      }
    },
    // The side-effect is that brackets in the "new" calls with generics are painted light-blue too,
    // like here: new MyClass<MyGenericType>(myArg);
    //
    // "new" keyword:
    {
      "scope": [
        "source.java keyword.control.new",
      ],
      "settings": {
        "foreground": "#0000CC"
      }
    },
    //
    // dot ".":
    {
      "scope": [
        "source.java punctuation.separator.period",
        "source.java storage.modifier.import punctuation.separator",
      ],
      "settings": {
        "foreground": "#A9A9A9"
      }
    },
    //
    //
    //
    // ====================================================
    // Python (.py):
    //
    // type names:
    {
      "scope": [
        "entity.other.inherited-class.python",
        "meta.class.inheritance.python constant.other.caps.python",
        "support.type.python",
        "support.type.exception.python",
      ],
      "settings": {
        "foreground": "#E8810C"
      }
    },
    //
    // function name in a call:
    {
      "scope": [
        "meta.function-call.generic.python",
      ],
      "settings": {
        "foreground": "#0000CC"
      }
    },
    //
    // function name in definition:
    {
      "scope": [
        "meta.function.python entity.name.function.python",
        "meta.class.python entity.name.type.class.python",
      ],
      "settings": {
        "foreground": "#0000CC",
        "fontStyle": "bold"
      }
    },
    //
    // constant names:
    {
      "scope": [
        "constant.other.caps.python",
      ],
      "settings": {
        "foreground": "#000000",
      }
    },
    //
    // "True", "False" constant values:
    {
      "scope": [
        "constant.language.python",
      ],
      "settings": {
        "foreground": "#A31515",
      }
    },
    //
    // "self" keyword:
    {
      "scope": [
        "variable.language.special.self.python",
      ],
      "settings": {
        "foreground": "#C344AB",
      }
    },
    //
    // property access:
    {
      "scope": [
        "meta.member.access.python meta.attribute.python",
      ],
      "settings": {
        "foreground": "#000000",
      }
    },
    //
    // "@" decorator:
    {
      "scope": [
        "punctuation.definition.decorator.python", // "@"
        "meta.function.decorator.python support.type.python", // decorator names
        "meta.function.decorator.python entity.name.function.decorator.python", // decorator names
      ],
      "settings": {
        "foreground": "#0000CC"
      }
    },
    //
    // "{ }" string interpolation:
    {
      "scope": [
        "constant.character.format.placeholder.other.python", // "{ }"
      ],
      "settings": {
        "foreground": "#0BC5E3"
      }
    },
    //
    // "f" f-strings:
    {
      "scope": [
        "storage.type.string.python",
      ],
      "settings": {
        "foreground": "#0BC5E3"
      }
    },
    //
    // "0x" hex number prefix:
    {
      "scope": [
        "constant.numeric.hex.python storage.type.number.python",
      ],
      "settings": {
        "foreground": "#E8810C"
      }
    },
    //
    // docs:
    {
      "scope": [
        "string.quoted.docstring punctuation.definition.string", // "'''"
        "string.quoted.docstring", // comment text
      ],
      "settings": {
        "foreground": "#50A750"
      }
    },
    //
    // comments:
    {
      "scope": [
        "comment.line.number-sign.python",
        "comment.line.number-sign.python keyword",
      ],
      "settings": {
        "foreground": "#50A750"
      }
    },
    //
    // "requirements.txt" key name:
    {
      "scope": [
        "source.pip-requirements entity.name.class",
      ],
      "settings": {
        "foreground": "#0000CC"
      }
    },
    //
    // "requirements.txt" value:
    {
      "scope": [
        "source.pip-requirements constant.numeric",
      ],
      "settings": {
        "foreground": "#A31515"
      }
    },
    //
    //
    //
    // ====================================================
    // PowerShell (.ps1):
    //
    // type keyword declaration:
    {
      "scope": [
        "source.powershell storage.type", // function
      ],
      "settings": {
        "foreground": "#E8810C"
      }
    },
    //
    // function keyword in declaration:
    {
      "scope": [
        "source.powershell meta.function storage.type", // function
      ],
      "settings": {
        "foreground": "#A31515"
      }
    },
    //
    // function names in declaration:
    {
      "scope": [
        "source.powershell entity.name.function",
      ],
      "settings": {
        "foreground": "#0000CC",
        "fontStyle": "bold"
      }
    },
    //
    // function names in function call:
    {
      "scope": [
        "source.powershell support.function",
      ],
      "settings": {
        "foreground": "#0000CC"
      }
    },
    //
    // function names in attribute:
    {
      "scope": [
        "source.powershell support.function.attribute",
      ],
      "settings": {
        "foreground": "#0000CC"
      }
    },
    //
    // variable parameter name in attribute:
    {
      "scope": [
        "source.powershell variable.parameter.attribute", // variable parameter name in attribute
      ],
      "settings": {
        "foreground": "#000000"
      }
    },
    //
    // variable names:
    {
      "scope": [
        "source.powershell variable.language",
        "source.powershell variable.other",
        "source.powershell variable.other.readwrite",
        "source.powershell support.variable.automatic", // $_
        "source.powershell interpolated.complex.source",
        "source.powershell punctuation.definition.variable",
        "source.powershell entity.name",
      ],
      "settings": {
        "foreground": "#C344AB"
      }
    },
    //
    // property/method names:
    {
      "scope": [
        "source.powershell variable.other.member", // property/method names
      ],
      "settings": {
        "foreground": "#000000"
      }
    },
    //
    // operators:
    {
      "scope": [
        "source.powershell keyword.operator.comparison", // -replace
        "source.powershell keyword.operator.logical", // -Not
      ],
      "settings": {
        "foreground": "#A9A9A9"
      }
    },
    //
    // ( ) round braces in a template string, like "Created a $(tempFolderName) folder." :
    {
      "scope": [
        "source.powershell string.quoted punctuation.section.group", // ( ) round braces in a template string
      ],
      "settings": {
        "foreground": "#000000"
      }
    },
    //
    // meta.scriptblock (???):
    {
      "scope": [
        "source.powershell meta.scriptblock", // ( ) round braces in a template string
        // text with no syntax tokens...
      ],
      "settings": {
        "foreground": "#A9A9A9"
      }
    },
    //
    // constant values, "$false", "$null":
    {
      "scope": [
        "source.powershell meta.scriptblock constant.language", // "false", "null"
        "source.powershell meta.scriptblock constant.language punctuation.definition.variable", // "$"
      ],
      "settings": {
        "foreground": "#A31515"
      }
    },
    //
    // comments:
    {
      "scope": [
        "source.powershell comment.block keyword.operator",
      ],
      "settings": {
        "foreground": "#50A750"
      }
    },
    //
    // "@" in array definition:
    {
      "scope": [
        "source.powershell keyword.other.array.begin",
        "source.powershell keyword.other.hashtable.begin",
      ],
      "settings": {
        "foreground": "#A9A9A9"
      }
    },
    //
    //
    //
    // ====================================================
    // Shell:
    //
    // variable names:
    {
      "scope": [
        "source.shell variable.other",
      ],
      "settings": {
        "foreground": "#C344AB"
      }
    },
    //
    // variable positional:
    {
      "scope": [
        "source.shell variable.parameter.positional",
        "source.shell punctuation.definition.variable variable.parameter.positional", // "$" in shell variable names
      ],
      "settings": {
        "foreground": "#C344AB",
      }
    },
    //
    // variable names during call:
    {
      "scope": [
        "source.shell punctuation.definition.variable", // "$" in shell variable names
      ],
      "settings": {
        "foreground": "#0BC5E3"
      }
    },
    //
    // string interpolation "${}":
    {
      "scope": [
        "source.shell variable.other.bracket punctuation.definition.variable",
        "source.shell punctuation.definition.evaluation.arithmetic",
        "source.shell string.interpolated.dollar punctuation.definition.evaluation.parens", // "$( )"
      ],
      "settings": {
        "foreground": "#0BC5E3"
      }
    },
    //
    // "` `" backticks:
    {
      "scope": [
        "source.shell punctuation.definition.evaluation.backticks",
      ],
      "settings": {
        "foreground": "#0BC5E3",
        "fontStyle": "bold"
      }
    },
    //
    // ">>" redirect:
    {
      "scope": [
        "source.shell keyword.operator.redirect",
      ],
      "settings": {
        "foreground": "#0000CC",
      }
    },
    //
    // command arguments:
    {
      "scope": [
        "source.shell string.unquoted.argument",
        "string.unquoted.argument.shell",
        "source.shell constant.other.option",
      ],
      "settings": {
        "foreground": "#A31515"
      }
    },
    //
    //
    //
    // ====================================================
    // CSS, SASS, SCSS, LESS, CSS-in-JS:
    //
    // Names in CSS:
    //
    // class, id selector syntax:
    {
      "scope": [
        "source.css entity.name.tag",
        "meta.embedded.block.css entity.name.tag",
        "meta.embedded.block.css entity.name.tag.reference",
        "source.css meta.selector entity.name.tag",
        "meta.embedded.block.css meta.selector entity.name.tag",
        "source.css entity.other.attribute-name.class", // class selector
        "meta.embedded.block.css entity.other.attribute-name.class", // class selector
        "source.css entity.other.attribute-name.id", // id selector
        "meta.embedded.block.css entity.other.attribute-name.id", // id selector
        "source.css entity.other.attribute-name.parent-selector",
        "meta.embedded.block.css entity.other.attribute-name.parent-selector",
        "source.css punctuation.definition.entity", // "#, ."
        "meta.embedded.block.css punctuation.definition.entity", // "#, ."
      ],
      "settings": {
        "foreground": "#0000CC"
      }
    },
    //
    // pseudo-class selector syntax:
    //
    // pseudo-class and pseudo-element selectors:
    {
      "scope": [
        // "has", "not", "disabled" and similar:
        "source.css entity.other.attribute-name.pseudo-class",
        "meta.embedded.block.css entity.other.attribute-name.pseudo-class",
        // "after" and similar:
        "source.css entity.other.attribute-name.pseudo-element",
        "meta.embedded.block.css entity.other.attribute-name.pseudo-element",
      ],
      "settings": {
        "foreground": "#8080E6" // #0000CC80
      }
    },
    //
    // ":" in pseudo-class selector syntax:
    {
      "scope": [
        "entity.other.attribute-name.pseudo-class.css punctuation.definition.entity.css", // ":"
        "entity.other.attribute-name.pseudo-element.css punctuation.definition.entity.css", // ":"
      ],
      "settings": {
        "foreground": "#A9A9A9"
      }
    },
    //
    // type names in @extend:
    {
      "scope": [
        // "source.css meta.at-rule.include entity.name.function",
        // "meta.embedded.block.css meta.at-rule.include entity.name.function",
        "source.css meta.at-rule.extend entity.other.attribute-name.class",
        "meta.embedded.block.css meta.at-rule.extend entity.other.attribute-name.class",
      ],
      "settings": {
        "foreground": "#0000CC",
      }
    },
    //
    // tag names also:
    {
      "scope": [
        "source.css meta.property-list entity.name.tag" // I know this breaks "content" property.
      ],
      "settings": {
        "foreground": "#0000CC"
      }
    },
    //
    // attribute names:
    {
      "scope": [
        "source.css meta.attribute-selector entity.other.attribute-name",
      ],
      "settings": {
        "foreground": "#000000"
      }
    },
    //
    // variable name:
    {
      "scope": [
        "source.css meta.definition.variable variable",
        "source.css variable",
        "source.css variable.argument",
        "source.css meta.property-list variable.other.less", // for LESS
        "source.css meta.property-list variable.other.less punctuation.definition.variable.less", // for LESS
        "variable.parameter.postcss", // for PostCSS
      ],
      "settings": {
        "foreground": "#E8810C"
      }
    },
    //
    // variable name as mixin parameters in LESS:
    {
      "scope": [
        "source.css variable.other.less", // for LESS
        "source.css variable.other.less punctuation.definition.variable.less", // for LESS
      ],
      "settings": {
        "foreground": "#E8810C"
      }
    },
    //
    // variable name, not sure where:
    {
      "scope": [
        "source.css meta.property-name.media-query",
      ],
      "settings": {
        "foreground": "#000000",
      }
    },
    //
    // function name in definition:
    {
      "scope": [
        "source.css meta.at-rule.mixin entity.name.function",
        "source.css meta.at-rule.function support.function",
        "source.css meta.at-rule.keyframes entity.name.function",
      ],
      "settings": {
        "foreground": "#0000CC",
        "fontStyle": "bold"
      }
    },
    //
    // Mixin name in LESS:
    {
      "scope": [
        "source.css.less entity.other.attribute-name.class.mixin"
      ],
      "settings": {
        "foreground": "#0BC5E3"
      }
    },
    //
    // function name in function call:
    {
      "scope": [
        "source.css entity.name.function",
        "source.css support.function", // function call in CSS
      ],
      "settings": {
        "foreground": "#0BC5E3"
      }
    },
    //
    // property names:
    {
      "scope": [
        "source.css support.type.property-name", // property names in CSS
        "meta.embedded.block.css support.type.property-name", // for CSS embedded in Markdown
        "source.css support.type.vendored.property-name", // property names in CSS
        "meta.embedded.block.css support.type.vendored.property-name", // for CSS embedded in Markdown
        "source.css meta.property-name", // property names in CSS
        "meta.embedded.block.css meta.property-name", // for CSS embedded in Markdown
        "source.css entity.other.attribute-name", // property names in CSS
        "meta.embedded.block.css entity.other.attribute-name", // for CSS embedded in Markdown
      ],
      "settings": {
        "foreground": "#C344AB"
      }
    },
    //
    // property literals:
    {
      "scope": [
        "source.css constant.other.color.rgb-value.hex",
        "source.css.postcss constant.other.color.rgb-value.hex",
        "source.css.postcss constant.other.color.rgb-value",
        "source.css constant.other.color.rgb-value.hex punctuation.definition.constant",
        "source.css.postcss constant.other.color.rgb-value.hex punctuation.definition.constant",
        "source.css constant.other.rgb-value",
        "source.css.postcss constant.other.rgb-value",
        "source.css support.constant.property-value",
        "source.css.postcss support.constant.property-value",
        "source.css meta.attribute-selector",
        "source.css.postcss meta.attribute-selector",
        "source.css meta.property-value",
        "source.css.postcss meta.property-value",
        "source.css meta.property-value support.type.property-name",
        "source.css.postcss meta.property-value support.type.property-name",
        "source.css support.constant.font-name",
        "source.css.postcss support.constant.font-name",
      ],
      "settings": {
        "foreground": "#A31515"
      }
    },
    //
    // property literals:
    {
      "scope": [
        "source.css constant.numeric",
        "source.css keyword.other.unit",
        "meta.embedded.block.css keyword.other.unit" // fix fir Markdown CSS
      ],
      "settings": {
        "foreground": "#000000"
      }
    },
    //
    // URLs:
    {
      "scope": [
        "source.css variable.parameter.url",
        "meta.embedded.block.css variable.parameter.url",
      ],
      "settings": {
        "foreground": "#A31515"
      }
    },
    //
    // property names in @media queries:
    {
      "scope": [
        "source.css support.type.property-name.media", // property names in @media queries
      ],
      "settings": {
        "foreground": "#C344AB"
      }
    },
    //
    // @media syntax:
    {
      "scope": [
        // constants in CSS @media rules: like "screen",
        // it's blue to separate them from media-rules and css-keywords:
        // "source.css support.constant.media", // "screen" keyword
        "source.css meta.at-rule.import",
      ],
      "settings": {
        "foreground": "#000000"
      }
    },
    //
    // @media syntax:
    {
      "scope": [
        // constants in CSS @media rules: like "screen",
        // it's blue to separate them from media-rules and css-keywords:
        "source.css support.constant.media", // "screen" keyword
        "source.css.less support.constant.media-type.media" // "screen" keyword in LESS
      ],
      "settings": {
        "foreground": "#C344AB"
      }
    },
    //
    // "@import" syntax:
    //
    // name in "@import" syntax:
    {
      "scope": [
        "source.css meta.at-rule.import string.quoted",
      ],
      "settings": {
        "foreground": "#A31515",
      }
    },
    //
    // "@import" keyword:
    {
      "scope": [
        "source.css keyword.control.at-rule.import",
        "meta.embedded.block.css keyword.control.at-rule.import",
        "meta.embedded.block.scss keyword.control.at-rule.import",
        "source.css keyword.control.at-rule.import punctuation.definition.keyword",
        "meta.embedded.block.css keyword.control.at-rule.import punctuation.definition.keyword",
        "meta.embedded.block.scss keyword.control.at-rule.import punctuation.definition.keyword",
      ],
      "settings": {
        "foreground": "#0BC5E3",
      }
    },
    //
    //
    //
    // Keywords in CSS:
    //
    // general keywords, include the main ones like "@if", "@else", "@return", "@content":
    {
      "scope": [
        "source.css keyword.control",
        "meta.embedded.block.css keyword.control",
        "meta.embedded.block.scss keyword.control",
      ],
      "settings": {
        "foreground": "#0BC5E3"
      }
    },
    //
    // general at-rule keywords, excluding the main ones, so it's about the likes of "@tailwind":
    {
      "scope": [
        "source.css keyword.control.at-rule",
        "meta.embedded.block.css keyword.control.at-rule",
        "meta.embedded.block.scss keyword.control.at-rule",
        "source.css keyword.control.at-rule punctuation.definition.keyword",
        "meta.embedded.block.css keyword.control.at-rule punctuation.definition.keyword",
        "meta.embedded.block.scss keyword.control.at-rule punctuation.definition.keyword",
      ],
      "settings": {
        "foreground": "#0BC5E3"
      }
    },
    //
    // "@function", "@mixin", "@keyframes" keywords:
    {
      "scope": [
        // "@function":
        "source.css keyword.control.at-rule.function",
        "meta.embedded.block.css keyword.control.at-rule.function",
        "meta.embedded.block.scss keyword.control.at-rule.function",
        "source.css keyword.control.at-rule.function punctuation.definition.keyword",
        "meta.embedded.block.css keyword.control.at-rule.function punctuation.definition.keyword",
        "meta.embedded.block.scss keyword.control.at-rule.function punctuation.definition.keyword",
        // "@mixin":
        "source.css keyword.control.at-rule.mixin",
        "meta.embedded.block.css keyword.control.at-rule.mixin",
        "meta.embedded.block.scss keyword.control.at-rule.mixin",
        "source.css keyword.control.at-rule.mixin punctuation.definition.keyword",
        "meta.embedded.block.css keyword.control.at-rule.mixin punctuation.definition.keyword",
        "meta.embedded.block.scss keyword.control.at-rule.mixin punctuation.definition.keyword",
        // "@keyframes":
        "source.css keyword.control.at-rule.keyframes",
        "meta.embedded.block.css keyword.control.at-rule.keyframes",
        "meta.embedded.block.scss keyword.control.at-rule.keyframes",
        "source.css keyword.control.at-rule.keyframes punctuation.definition.keyword",
        "meta.embedded.block.css keyword.control.at-rule.keyframes punctuation.definition.keyword",
        "meta.embedded.block.scss keyword.control.at-rule.keyframes punctuation.definition.keyword",
      ],
      "settings": {
        "foreground": "#A31515",
      }
    },
    //
    // "@media" keyword:
    {
      "scope": [
        "source.css keyword.control.at-rule.media",
        "meta.embedded.block.css keyword.control.at-rule.media",
        "meta.embedded.block.scss keyword.control.at-rule.media",
        "source.css keyword.control.at-rule.media punctuation.definition.keyword",
        "meta.embedded.block.css keyword.control.at-rule.media punctuation.definition.keyword",
        "meta.embedded.block.scss keyword.control.at-rule.media punctuation.definition.keyword",
      ],
      "settings": {
        "foreground": "#0BC5E3",
      }
    },
    //
    // "@include", "@extend", "@supports" keywords:
    {
      "scope": [
        // "@include":
        // "source.css keyword.control.at-rule.include",
        // "source.css keyword.control.at-rule.include punctuation.definition.keyword",
        // "@extend":
        "source.css keyword.control.at-rule.extend",
        "source.css keyword.control.at-rule.extend punctuation.definition.keyword",
        // "@supports":
        "source.css keyword.control.at-rule.supports",
        "source.css keyword.control.at-rule.supports punctuation.definition.keyword",
      ],
      "settings": {
        "foreground": "#0BC5E3",
      }
    },
    //
    // "@include" syntax:
    //
    // "@include" keyword:
    {
      "scope": [
        // "@include":
        "source.css keyword.control.at-rule.include",
        "source.css keyword.control.at-rule.include punctuation.definition.keyword",
      ],
      "settings": {
        "foreground": "#0BC5E3",
      }
    },
    //
    // type name in "@include":
    {
      "scope": [
        "source.css meta.at-rule.include entity.name.function",
        "meta.embedded.block.css meta.at-rule.include entity.name.function",
      ],
      "settings": {
        "foreground": "#0000CC",
      }
    },
    //
    // "from", "through", "in" keywords:
    {
      "scope": [
        "source.css keyword.control.operator"
      ],
      "settings": {
        "foreground": "#0BC5E3"
      }
    },
    //
    //
    {
      "scope": [
        "source.css keyword.operator.logical", // "and"
        "source.css keyword.control.logical.operator", // "and" in LESS
      ],
      "settings": {
        "foreground": "#A9A9A9"
      }
    },
    //
    // "!important" keyword:
    {
      "scope": [
        "source.css keyword.other.important",
      ],
      "settings": {
        "foreground": "#0BC5E3"
      }
    },
    //
    // "!default" keyword:
    {
      "scope": [
        "source.css keyword.other.default",
      ],
      "settings": {
        "foreground": "#A9A9A9"
      }
    },
    //
    // gradient keywords, like "to":
    {
      "scope": [
        "source.css keyword.operator.gradient",
      ],
      "settings": {
        "foreground": "#000000"
      }
    },
    //
    //
    //
    // Punctuation:
    //
    // "&" ampersand or parent selector in SASS and LESS:
    {
      "scope": [
        "source.css entity.name.tag.reference",
      ],
      "settings": {
        "foreground": "#0BC5E3"
      }
    },
    //
    // ">" in selector syntax:
    {
      "scope": [
        "keyword.operator.combinator.css",
      ],
      "settings": {
        "foreground": "#A9A9A9"
      }
    },
    //
    // ( ) braces in a function call:
    {
      "scope": [
        "source.css punctuation.section.function", // ( )
      ],
      "settings": {
        "foreground": "#A9A9A9"
      }
    },
    //
    // ( ) braces in a selector:
    {
      "scope": [
        "source.css meta.selector punctuation.section.function", // ( )
      ],
      "settings": {
        "foreground": "#A9A9A9"
      }
    },
    //
    // ( ) braces in a calculation:
    {
      "scope": [
        "source.css punctuation.definition.begin.bracket.round", // ( )
        "source.css punctuation.definition.end.bracket.round", // ( )
      ],
      "settings": {
        "foreground": "#A9A9A9"
      }
    },
    //
    // ( ) braces in @media rule:
    {
      "scope": [
        "source.css punctuation.definition.parameters.begin.bracket.round", // ( )
        "source.css punctuation.definition.parameters.end.bracket.round", // ( )
        "source.css punctuation.definition.media-query.begin.bracket.round", // ( )
        "source.css punctuation.definition.media-query.end.bracket.round", // ( )
        "source.css punctuation.definition.pseudo-class.begin.bracket.round", // ( )
        "source.css punctuation.definition.pseudo-class.end.bracket.round", // ( )
      ],
      "settings": {
        "foreground": "#A9A9A9"
      }
    },
    //
    // [ ] braces :
    {
      "scope": [
        "source.css punctuation.definition.begin", // [
        "source.css punctuation.definition.end", // ]
        "source.css punctuation.definition.entity.begin.bracket.square",
        "source.css punctuation.definition.entity.end.bracket.square"
      ],
      "settings": {
        "foreground": "#A9A9A9"
      }
    },
    //
    // "+", "-", "/", "*", "=" operators:
    {
      "scope": [
        "source.css keyword.operator",
        "source.css punctuation.separator.operator", // "=" in LESS
      ],
      "settings": {
        "foreground": "#000000"
      }
    },
    //
    // comparison operators:
    {
      "scope": [
        "source.css keyword.operator.comparison",
      ],
      "settings": {
        "foreground": "#A9A9A9"
      }
    },
    //
    // "#" interpolation:
    {
      "scope": [
        "source.css punctuation.definition.interpolation.begin.bracket.curly",
        "source.css punctuation.definition.interpolation.end.bracket.curly",
      ],
      "settings": {
        "foreground": "#0BC5E3"
      }
    },
    //
    // "@", at character:
    {
      "scope": [
        "source.css punctuation.definition.keyword", // @each, @include in SCSS
      ],
      "settings": {
        "foreground": "#0BC5E3"
      }
    },
    //
    // Code not covered by syntax tokens:
    {
      "scope": [
        "source.css",
      ],
      "settings": {
        "foreground": "#000000"
      }
    },
    //
    //
    //
    // ====================================================
    // PostCSS:
    //
    // A hack to solve poor PostCSS support:
    {
      "scope": [
        "source.css.postcss",
      ],
      "settings": {
        "foreground": "#A9A9A9"
      }
    },
    //
    //
    // ====================================================
    // HTML, XML, HTML-in-JS:
    //
    // Names in HTML:
    //
    // tag names:
    {
      "scope": [
        "text.html entity.name.tag", // tag names
        "text.xml entity.name.tag", // tag names
        "text.aspnetcorerazor entity.name.tag", // tag names
        "source.ts entity.name.tag", // tag names
        "source.js entity.name.tag", // tag names
        "source.tsx entity.name.tag", // tag names
        "source.jsx entity.name.tag", // tag names
        "source.ts entity.name.tag support.class", // tag names
        "source.js entity.name.tag support.class", // tag names
        "source.tsx entity.name.tag support.class", // tag names
        "source.jsx entity.name.tag support.class", // tag names
        "text.html punctuation.definition.tag", // <, >
        "text.html punctuation.definition.tag source.js-ignored-vscode", // <, > // "source.css-ignored-vscode" - for some weirdness in one JS file.
        "text.html punctuation.definition.tag source.css-ignored-vscode", // <, > // "source.css-ignored-vscode" - for some weird thing I saw once in a php file.
        "text.xml punctuation.definition.tag", // <, >
        "text.aspnetcorerazor punctuation.definition.tag", // <, >
        "text.aspnetcorerazor punctuation.definition.tag source.js-ignored-vscode", // <, >
        "text.aspnetcorerazor punctuation.definition.tag source.css-ignored-vscode", // <, >
        "source.ts punctuation.definition.tag", // <, >
        "source.js punctuation.definition.tag", // <, >
        "source.tsx punctuation.definition.tag", // <, >
        "source.jsx punctuation.definition.tag", // <, >
      ],
      "settings": {
        "foreground": "#0000CC"
      }
    },
    //
    // attribute names:
    {
      "scope": [
        "text.html entity.other.attribute-name",
        "text.html meta.attribute", // fixes "align" attribute in HTML inside Markdown.
        "text.xml entity.other.attribute-name",
        "text.aspnetcorerazor entity.other.attribute-name",
      ],
      "settings": {
        "foreground": "#C344AB"
      }
    },
    //
    //
    //
    // Others in HTML:
    //
    // just normal text:
    {
      "scope": [
        "text.html",
        "text.html.markdown meta.embedded.block.html", // HTML embedded into Markdown
        "text.html.markdown meta.embedded.block meta.jsx.children", // JSX embedded into Markdown
        "text.html.markdown meta.embedded.block meta.tsx.children", // JSX embedded into Markdown
        "text.xml",
        "text.svelte",
        "text.aspnetcorerazor",
        "source.ts",
        "source.js",
        "source.tsx",
        "source.jsx",
        "source.ts meta.jsx.children punctuation",
        "source.js meta.jsx.children punctuation",
        "source.tsx meta.jsx.children punctuation",
        "source.jsx meta.jsx.children punctuation",
      ],
      "settings": {
        "foreground": "#E8810C"
      }
    },
    //
    // strings:
    {
      "scope": [
        "text.html string",
        "text.xml string",
        "text.aspnetcorerazor string",
        "source.ts meta.tag.attributes string",
        "source.js meta.tag.attributes string",
        "source.tsx meta.tag.attributes string",
        "source.jsx meta.tag.attributes string",
      ],
      "settings": {
        "foreground": "#A31515"
      }
    },
    //
    //
    //
    // Punctuation in HTML:
    //
    // = assignment sign:
    {
      "scope": [
        "text.xml meta.tag", // = // it's actually a selector for almost all XML, but combined with the other theme rules, it's needed to just select the =
        "text.html punctuation.separator", // =
        "text.aspnetcorerazor punctuation.separator", // =
      ],
      "settings": {
        "foreground": "#000000"
      }
    },
    //
    //
    //
    // ====================================================
    // SQL:
    //
    // keywords:
    {
      "scope": [
        "source.sql keyword",
        "source.sql storage.modifier",
        "source.sql keyword.other.DDL.create.II",
      ],
      "settings": {
        "foreground": "#0000CC"
      }
    },
    //
    // types "INT", "VARCHAR", "DATE":
    {
      "scope": [
        "source.sql storage.type",
      ],
      "settings": {
        "foreground": "#E8810C"
      }
    },
    //
    // schema name:
    {
      "scope": [
        "source.sql entity.name.function",
        "source.sql constant.other.database-name",
      ],
      "settings": {
        "foreground": "#000000"
      }
    },
    //
    // table name:
    {
      "scope": [
        "source.sql constant.other.table-name",
      ],
      "settings": {
        "foreground": "#000000"
      }
    },
    //
    // function name:
    {
      "scope": [
        "source.sql support.function",
      ],
      "settings": {
        "foreground": "#0BC5E3"
      }
    },
    //
    // math operations "+", "=":
    {
      "scope": [
        "source.sql keyword.operator",
        "source.sql keyword.operator.comparison",
      ],
      "settings": {
        "foreground": "#000000"
      }
    },
    //
    // star in SELECT "*" FROM:
    {
      "scope": [
        "source.sql keyword.operator.star",
      ],
      "settings": {
        "foreground": "#000000"
      }
    },
    //
    // variable name:
    {
      "scope": [
        "source.sql text.variable",
      ],
      "settings": {
        "foreground": "#C344AB"
      }
    },
    //
    //
    //
    // ====================================================
    // JSON:
    //
    // property names:
    {
      "scope": [
        "source.json support.type.property-name",
      ],
      "settings": {
        "foreground": "#0000CC"
      }
    },
    //
    // property literals:
    {
      "scope": [
        "source.json constant.language", // true, false - boolean literals
        "source.json constant.numeric", // 1, 2 - numeric literals
      ],
      "settings": {
        "foreground": "#A31515"
      }
    },
    //
    //
    //
    // ====================================================
    // YAML (.yml, .yaml):
    //
    // Names in YAML:
    //
    // property names:
    {
      "scope": [
        "source.yaml entity.name.tag",
      ],
      "settings": {
        "foreground": "#0000CC"
      }
    },
    //
    // property literals:
    {
      "scope": [
        "source.yaml constant.language", // true, false - boolean literals
      ],
      "settings": {
        "foreground": "#A31515"
      }
    },
    //
    // numeric literals:
    {
      "scope": [
        "source.yaml constant.numeric", // 1, 2 - numeric literals
      ],
      "settings": {
        "foreground": "#000000"
      }
    },
    //
    //
    //
    // Punctuation in YAML:
    // "|" :
    {
      "scope": [
        "source.yaml keyword.control", // "|"
      ],
      "settings": {
        "foreground": "#A9A9A9"
      }
    },
    //
    // "[ ]" square brackets:
    {
      "scope": [
        "source.yaml punctuation.definition.sequence", // "[ ]"
      ],
      "settings": {
        "foreground": "#A9A9A9"
      }
    },
    //
    // "-" sequence item:
    {
      "scope": [
        "source.yaml punctuation.definition.block.sequence.item", // "-"
        "punctuation.definition.block.sequence.item.yaml", // "-"
      ],
      "settings": {
        "foreground": "#000000"
      }
    },
    //
    //
    //
    // ====================================================
    // GitHub Actions YAML (.yml, .yaml):
    {
      "scope": [
        "source.github-actions-workflow meta.embedded.block.github-actions-expression",
      ],
      "settings": {
        "foreground": "#0BC5E3"
      }
    },
    //
    //
    //
    // ====================================================
    // Markdown (.md):
    {
      "scope": [
        "text.html.markdown", // unstyled Markdown, text in embedded HTML too
      ],
      "settings": {
        "foreground": "#E8810C"
      }
    },
    //
    // just normal text:
    {
      "scope": [
        "text.html.markdown meta.paragraph",
      ],
      "settings": {
        "foreground": "#000000"
      }
    },
    //
    // lext like "&nbsp;" and "&lt;":
    {
      "scope": [
        "text.html.markdown meta.embedded.block.html constant.character.entity.named",
        "text.html.markdown meta.embedded.block.html constant.character.entity.named punctuation.definition.entity.html",
        "text.html.markdown meta.paragraph punctuation.definition.entity", // Fix for "&nbsp;".
        "text.html.markdown meta.paragraph constant.character.entity.named.lt", // Fix for "&lt;".
        "text.html.markdown meta.paragraph constant.character.entity.named.gt", // Fix for "&nbsp;".
      ],
      "settings": {
        "foreground": "#A9A9A9"
      }
    },
    //
    {
      "scope": "text.html.markdown markup.underline",
      "settings": {
        "fontStyle": "underline"
      }
    },
    {
      "scope": "text.html.markdown markup.bold",
      "settings": {
        "fontStyle": "bold",
      }
    },
    {
      "scope": "punctuation.definition.italic.markdown",
      "settings": {}
    },
    {
      "scope": [
        "text.html.markdown markup.heading heading",
        "text.html.markdown markup.heading heading punctuation.definition.heading",
        "text.html.markdown markup.heading heading punctuation.definition.entity", // Fix for "&nbsp;" in a heading.
      ],
      "settings": {
        "foreground": "#C344AB",
        "fontStyle": "bold"
      }
    },
    {
      "scope": "text.html.markdown markup.italic",
      "settings": {
        "fontStyle": "italic"
      }
    },
    {
      "scope": [
        "text.html.markdown markup.inserted",
        "text.html.markdown markup.fenced_code.block punctuation.definition.inserted.diff"
      ],
      "settings": {
        "foreground": "#00D000"
      }
    },
    {
      "scope": [
        "text.html.markdown markup.deleted",
        "text.html.markdown markup.fenced_code.block punctuation.definition.deleted.diff"
      ],
      "settings": {
        "foreground": "#FF0000"
      }
    },
    {
      "scope": "text.html.markdown markup.changed",
      "settings": {
        "foreground": "#0451A5"
      }
    },
    //
    //
    //
    // Punctuation:
    {
      "scope": [
        "text.html.markdown punctuation.definition.list.begin",
        "text.html.markdown keyword.operator.redirect"
      ],
      "settings": {
        "foreground": "#0000CC"
      }
    },
    // quote ">":
    {
      "scope": [
        "text.html.markdown punctuation.definition.quote.begin", // ">"
      ],
      "settings": {
        "foreground": "#0000CC",
        "fontStyle": "bold"
      }
    },
    //
    {
      "scope": [
        "text.html.markdown punctuation.definition.bold",
      ],
      "settings": {
        "foreground": "#A9A9A9"
      }
    },
    //
    //
    //
    // headings:
    //
    // ## heading punctuation:
    {
      "scope": [
        "text.html.markdown punctuation.definition.heading", // ##
      ],
      "settings": {
        "foreground": "#0BC5E3"
      }
    },
    //
    //
    //
    // links:
    //
    // link URL:
    {
      "scope": [
        "text.html.markdown markup.underline.link", // [](https://example.com/)
        "text.html.markdown heading markup.underline.link", // [](https://example.com/) // Fix for link URL in a heading.
        "text.html.markdown constant.other.reference.link", // [][homepage]
        "text.html.markdown heading constant.other.reference.link", // [][homepage] // Fix for link URL in a heading.
      ],
      "settings": {
        "foreground": "#A9A9A9"
      }
    },
    //
    // link title:
    {
      "scope": [
        "text.html.markdown string.other.link.title", // [title]()
        "text.html.markdown meta.link.reference.def constant.other.reference.link", // [homepage]()
      ],
      "settings": {
        "foreground": "#A31515"
      }
    },
    //
    // hidden link's square braces:
    {
      "scope": [
        "text.html.markdown meta.link.reference.def punctuation.definition.constant", // []
      ],
      "settings": {
        "foreground": "#000000"
      }
    },
    //
    //
    //
    // Separators in Markdown:
    {
      "scope": [
        "text.html.markdown meta.separator", // ---
      ],
      "settings": {
        "foreground": "#0000CC"
      }
    },
    //
    //
    //
    // Code blocks in Markdown:
    //
    // code block definition "```bash ```":
    {
      "scope": [
        "text.html.markdown markup.fenced_code.block punctuation.definition", // "```"
      ],
      "settings": {
        "foreground": "#0BC5E3",
        "fontStyle": "bold"
      }
    },
    {
      "scope": [
        "text.html.markdown markup.fenced_code.block fenced_code.block.language", // "bat", "powershell", "js"
      ],
      "settings": {
        "foreground": "#0BC5E3",
      }
    },
    //
    // code block text:
    {
      "scope": [
        "text.html.markdown markup.fenced_code.block",
        "text.html.markdown markup.fenced_code.block meta.embedded.block"
      ],
      "settings": {
        "foreground": "#A9A9A9"
      }
    },
    //
    // single backticks code span definition:
    {
      "scope": [
        "text.html.markdown punctuation.definition.raw", // "` `"
      ],
      "settings": {
        "foreground": "#0BC5E3",
        "fontStyle": "bold"
      }
    },
    //
    // single backticks code span text:
    {
      "scope": "text.html.markdown markup.inline.raw",
      "settings": {
        "foreground": "#A31515"
      }
    },
    //
    // weird text block:
    {
      "scope": [
        "text.html.markdown markup.raw.block",
      ],
      "settings": {
        "foreground": "#A9A9A9"
      }
    },
    //
    //
    //
    // ====================================================
    // Dockerfile (.dockerfile):
    //
    {
      "scope": [
        "source.dockerfile keyword.other",
      ],
      "settings": {
        "foreground": "#0000CC"
      }
    },
    //
    //
    //
    // ====================================================
    // dotEnv (.env), Environment Variables files:
    //
    // variable/property name:
    {
      "scope": [
        "source.env variable.other",
      ],
      "settings": {
        "foreground": "#0000CC"
      }
    },
    //
    // numeric literal
    {
      "scope": [
        "source.env constant.numeric",
      ],
      "settings": {
        "foreground": "#000000"
      }
    },
    //
    // value literal
    {
      "scope": [
        "source.env",
      ],
      "settings": {
        "foreground": "#A31515"
      }
    },
    //
    // "="
    {
      "scope": [
        "source.env keyword.operator.assignment",
      ],
      "settings": {
        "foreground": "#A9A9A9"
      }
    },
    //
    //
    //
    // ====================================================
    // Properties (.ini, .editorconfig):
    //
    // general text color:
    {
      "scope": [
        "source.ini",
      ],
      "settings": {
        "foreground": "#A31515"
      }
    },
    //
    // property names:
    {
      "scope": [
        "source.ini keyword.other.definition",
      ],
      "settings": {
        "foreground": "#0000CC"
      }
    },
    //
    // "=" separator:
    {
      "scope": [
        "source.ini punctuation.separator.key-value",
      ],
      "settings": {
        "foreground": "#A9A9A9"
      }
    },
    //
    // section titles:
    {
      "scope": [
        "source.ini entity.name.section.group-title",
      ],
      "settings": {
        "foreground": "#E8810C",
      }
    },
    //
    //
    //
    // ====================================================
    // TOML (.toml):
    //
    {
      "scope": [
        "support.type.property-name.table.toml",
      ],
      "settings": {
        "foreground": "#E8810C"
      }
    },
    //
    //
    //
    // ====================================================
    // Makefile (.makefile):
    //
    {
      "scope": [
        "keyword.control.@.makefile",
      ],
      "settings": {
        "foreground": "#000000"
      }
    },
    //
    //
    //
    // ====================================================
    // Ignore (.gitignore, .ignore):
    //
    {
      "scope": [
        "source.ignore",
      ],
      "settings": {
        "foreground": "#000000"
      }
    },
    //
    //
    //
    // ====================================================
    // AutoHotKey (AHK):
    //
    //
    //
    // Names in AutoHotKey:
    //
    // Preprocessor directives:
    {
      "scope": [
        "source.ahk keyword.control.directives",
      ],
      "settings": {
        "foreground": "#A9A9A9"
      }
    },
    //
    // Function names:
    {
      "scope": [
        "source.ahk support.function",
      ],
      "settings": {
        "foreground": "#0000CC"
      }
    },
    //
    // Hotkey literals:
    {
      "scope": [
        "source.ahk hotkeyline",
        "source.ahk keyword.keys"
      ],
      "settings": {
        "foreground": "#E8810C"
      }
    },
    //
    // Labels:
    {
      "scope": [
        "source.ahk hotkeyline entity.name.function.label",
      ],
      "settings": {
        "foreground": "#E8810C"
      }
    },
    //
    //
    //
    // Keywords in AutoHotKey:
    //
    // "On", "Off" keywords:
    {
      "scope": [
        "source.ahk keyword.other"
      ],
      "settings": {
        "foreground": "#A31515"
      }
    },
    //
    //
    //
    // Punctuation in AutoHotKey:
    //
    // comment sign ";":
    {
      "scope": "source.ahk punctuation.definition.comment", // ";"
      "settings": {
        "foreground": "#50A750",
      }
    },
    //
    // " " string quotes:
    {
      "scope": [
        "source.ahk punctuation.definition.string.begin",
        "source.ahk punctuation.definition.string.end"
      ],
      "settings": {
        "foreground": "#A31515"
      }
    },
    //
    // "{ }", "::", "," punctuation:
    {
      "scope": [
        "source.ahk punctuation.bracket", // "{ }"
        "source.ahk punctuation.definition.equals.colon", // "::"
        "source.ahk punctuation" // ","
      ],
      "settings": {
        "foreground": "#A9A9A9"
      }
    },
    //
    //
    //
    // ====================================================
    // Text style:
    //
    //
    //
    {
      "scope": "emphasis",
      "settings": {
        "fontStyle": "italic"
      }
    },
    {
      "scope": "strong",
      "settings": {
        "fontStyle": "bold"
      }
    }
  ]
}